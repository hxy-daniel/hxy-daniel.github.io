(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{772:function(t,r,v){"use strict";v.r(r);var s=v(1),_=Object(s.a)({},(function(){var t=this,r=t.$createElement,v=t._self._c||r;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"服务之间的调用为啥不直接用-http-而用-rpc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#服务之间的调用为啥不直接用-http-而用-rpc"}},[t._v("#")]),t._v(" 服务之间的调用为啥不直接用 HTTP 而用 RPC？")]),t._v(" "),v("h2",{attrs:{id:"什么是-rpc-rpc原理是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是-rpc-rpc原理是什么"}},[t._v("#")]),t._v(" 什么是 RPC?RPC原理是什么?")]),t._v(" "),v("h3",{attrs:{id:"什么是-rpc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是-rpc"}},[t._v("#")]),t._v(" "),v("strong",[t._v("什么是 RPC？")])]),t._v(" "),v("p",[t._v("RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。比如两个不同的服务 A、B 部署在两台不同的机器上，那么服务 A 如果想要调用服务 B 中的某个方法该怎么办呢？使用 HTTP请求 当然可以，但是可能会比较慢而且一些优化做的并不好。 RPC 的出现就是为了解决这个问题。")]),t._v(" "),v("h3",{attrs:{id:"rpc原理是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rpc原理是什么"}},[t._v("#")]),t._v(" "),v("strong",[t._v("RPC原理是什么？")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-6/37345851.jpg",alt:"RPC原理图"}})]),t._v(" "),v("ol",[v("li",[t._v("服务消费端（client）以本地调用的方式调用远程服务；")]),t._v(" "),v("li",[t._v("客户端 Stub（client stub） 接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体（序列化）："),v("code",[t._v("RpcRequest")]),t._v("；")]),t._v(" "),v("li",[t._v("客户端 Stub（client stub） 找到远程服务的地址，并将消息发送到服务提供端；")]),t._v(" "),v("li",[t._v("服务端 Stub（桩）收到消息将消息反序列化为Java对象: "),v("code",[t._v("RpcRequest")]),t._v("；")]),t._v(" "),v("li",[t._v("服务端 Stub（桩）根据"),v("code",[t._v("RpcRequest")]),t._v("中的类、方法、方法参数等信息调用本地的方法；")]),t._v(" "),v("li",[t._v("服务端 Stub（桩）得到方法执行结果并将组装成能够进行网络传输的消息体："),v("code",[t._v("RpcResponse")]),t._v("（序列化）发送至消费方；")]),t._v(" "),v("li",[t._v("客户端 Stub（client stub）接收到消息并将消息反序列化为Java对象:"),v("code",[t._v("RpcResponse")]),t._v(" ，这样也就得到了最终结果。")])]),t._v(" "),v("p",[t._v("下面再贴一个网上的时序图，辅助理解：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-6/32527396.jpg",alt:"RPC原理时序图"}})]),t._v(" "),v("h3",{attrs:{id:"rpc-解决了什么问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rpc-解决了什么问题"}},[t._v("#")]),t._v(" RPC 解决了什么问题？")]),t._v(" "),v("p",[t._v("从上面对 RPC 介绍的内容中，概括来讲RPC 主要解决了："),v("strong",[t._v("让分布式或者微服务系统中不同服务之间的调用像本地调用一样简单。")])]),t._v(" "),v("h3",{attrs:{id:"常见的-rpc-框架总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见的-rpc-框架总结"}},[t._v("#")]),t._v(" 常见的 RPC 框架总结?")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("RMI（JDK自带）：")]),t._v(" JDK自带的RPC，有很多局限性，不推荐使用。")]),t._v(" "),v("li",[v("strong",[t._v("Dubbo:")]),t._v(" Dubbo是 阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和 Spring框架无缝集成。目前 Dubbo 已经成为 Spring Cloud Alibaba 中的官方组件。")]),t._v(" "),v("li",[v("strong",[t._v("gRPC")]),t._v(" ：gRPC是可以在任何环境中运行的现代开源高性能RPC框架。它可以通过可插拔的支持来有效地连接数据中心内和跨数据中心的服务，以实现负载平衡，跟踪，运行状况检查和身份验证。它也适用于分布式计算的最后一英里，以将设备，移动应用程序和浏览器连接到后端服务。")]),t._v(" "),v("li",[v("strong",[t._v("Hessian：")]),t._v(" Hessian是一个轻量级的remoting on http工具，使用简单的方法提供了RMI的功能。 相比WebService，Hessian更简单、快捷。采用的是二进制RPC协议，因为采用的是二进制协议，所以它很适合于发送二进制数据。")]),t._v(" "),v("li",[v("strong",[t._v("Thrift：")]),t._v("  Apache Thrift是Facebook开源的跨语言的RPC通信框架，目前已经捐献给Apache基金会管理，由于其跨语言特性和出色的性能，在很多互联网公司得到应用，有能力的公司甚至会基于thrift研发一套分布式服务框架，增加诸如服务注册、服务发现等功能。")])]),t._v(" "),v("h3",{attrs:{id:"rpc学习材料"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rpc学习材料"}},[t._v("#")]),t._v(" RPC学习材料")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://github.com/Snailclimb/guide-rpc-framework",target:"_blank",rel:"noopener noreferrer"}},[t._v("跟着 Guide 哥造轮子"),v("OutboundLink")],1)])]),t._v(" "),v("h2",{attrs:{id:"既有-http-为啥用-rpc-进行服务调用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#既有-http-为啥用-rpc-进行服务调用"}},[t._v("#")]),t._v(" 既有 HTTP ,为啥用 RPC 进行服务调用?")]),t._v(" "),v("h3",{attrs:{id:"rpc-只是一种设计而已"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rpc-只是一种设计而已"}},[t._v("#")]),t._v(" RPC 只是一种设计而已")]),t._v(" "),v("p",[t._v("RPC 只是一种概念、一种设计，就是为了解决 "),v("strong",[t._v("不同服务之间的调用问题")]),t._v(", 它一般会包含有 "),v("strong",[t._v("传输协议")]),t._v(" 和 "),v("strong",[t._v("序列化协议")]),t._v(" 这两个。")]),t._v(" "),v("p",[t._v("但是，HTTP  是一种协议，RPC框架可以使用 HTTP协议作为传输协议或者直接使用TCP作为传输协议，使用不同的协议一般也是为了适应不同的场景。")]),t._v(" "),v("h3",{attrs:{id:"http-和-tcp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-和-tcp"}},[t._v("#")]),t._v(" HTTP 和 TCP")]),t._v(" "),v("p",[v("strong",[t._v("可能现在很多对计算机网络不太熟悉的朋友已经被搞蒙了，要想真正搞懂，还需要来简单复习一下计算机网络基础知识：")])]),t._v(" "),v("blockquote",[v("p",[t._v("我们通常谈计算机网络的五层协议的体系结构是指：应用层、传输层、网络层、数据链路层、物理层。")]),t._v(" "),v("p",[v("strong",[t._v("应用层(application-layer）的任务是通过应用进程间的交互来完成特定网络应用。")]),t._v(" HTTP 属于应用层协议，它会基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。HTTP协议工作于客户端-服务端架构上。浏览器作为HTTP客户端通过 URL 向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。HTTP协议建立在 TCP 协议之上。")]),t._v(" "),v("p",[v("strong",[t._v("传输层(transport layer)的主要任务就是负责向两台主机进程之间的通信提供通用的数据传输服务")]),t._v("。TCP是传输层协议，主要解决数据如何在网络中传输。相比于UDP,"),v("strong",[t._v("TCP")]),t._v(" 提供的是"),v("strong",[t._v("面向连接")]),t._v("的，"),v("strong",[t._v("可靠的")]),t._v("数据传输服务。")])]),t._v(" "),v("h3",{attrs:{id:"rpc框架功能更齐全"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rpc框架功能更齐全"}},[t._v("#")]),t._v(" RPC框架功能更齐全")]),t._v(" "),v("p",[t._v('成熟的 RPC框架还提供好了“服务自动注册与发现”、"智能负载均衡"、“可视化的服务治理和运维”、“运行期流量调度”等等功能，这些也算是选择\nRPC 进行服务注册和发现的一方面原因吧！')]),t._v(" "),v("p",[v("strong",[t._v("相关阅读：")])]),t._v(" "),v("ul",[v("li",[t._v("http://www.ruanyifeng.com/blog/2016/08/http.html （HTTP 协议入门- 阮一峰）")])]),t._v(" "),v("h3",{attrs:{id:"一个常见的错误观点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一个常见的错误观点"}},[t._v("#")]),t._v(" 一个常见的错误观点")]),t._v(" "),v("p",[t._v("很多文章中还会提到说 HTTP 协议相较于自定义 TCP 报文协议，增加的开销在于连接的建立与断开，但是这个观点已经被否认，下面截取自知乎中一个回答，原回答地址：https://www.zhihu.com/question/41609070/answer/191965937 。")]),t._v(" "),v("blockquote",[v("p",[t._v("首先要否认一点 HTTP 协议相较于自定义 TCP 报文协议，增加的开销在于连接的建立与断开。HTTP 协议是支持连接池复用的，也就是建立一定数量的连接不断开，并不会频繁的创建和销毁连接。二一要说的是 HTTP 也可以使用 Protobuf 这种二进制编码协议对内容进行编码，因此二者最大的区别还是在传输协议上。")])])])}),[],!1,null,null,null);r.default=_.exports}}]);