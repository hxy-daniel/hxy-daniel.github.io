(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{880:function(t,s,e){"use strict";e.r(s);var a=e(1),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"版本控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本控制"}},[t._v("#")]),t._v(" 版本控制")]),t._v(" "),e("h3",{attrs:{id:"什么是版本控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是版本控制"}},[t._v("#")]),t._v(" 什么是版本控制")]),t._v(" "),e("p",[t._v("版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 除了项目源代码，你可以对任何类型的文件进行版本控制。")]),t._v(" "),e("h3",{attrs:{id:"为什么要版本控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要版本控制"}},[t._v("#")]),t._v(" 为什么要版本控制")]),t._v(" "),e("p",[t._v("有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。")]),t._v(" "),e("h3",{attrs:{id:"本地版本控制系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地版本控制系统"}},[t._v("#")]),t._v(" 本地版本控制系统")]),t._v(" "),e("p",[t._v("许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。 这么做唯一的好处就是简单，但是特别容易犯错。 有时候会混淆所在的工作目录，一不小心会写错文件或者覆盖意想外的文件。")]),t._v(" "),e("p",[t._v("为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-3/本地版本控制系统.png",alt:"本地版本控制系统"}})]),t._v(" "),e("h3",{attrs:{id:"集中化的版本控制系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集中化的版本控制系统"}},[t._v("#")]),t._v(" 集中化的版本控制系统")]),t._v(" "),e("p",[t._v("接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作？ 于是，集中化的版本控制系统（Centralized Version Control Systems，简称 CVCS）应运而生。")]),t._v(" "),e("p",[t._v("集中化的版本控制系统都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-3/集中化的版本控制系统.png",alt:"集中化的版本控制系统"}})]),t._v(" "),e("p",[t._v("这么做虽然解决了本地版本控制系统无法让在不同系统上的开发者协同工作的诟病，但也还是存在下面的问题：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("单点故障：")]),t._v(" 中央服务器宕机，则其他人无法使用；如果中心数据库磁盘损坏又没有进行备份，你将丢失所有数据。本地版本控制系统也存在类似问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。")]),t._v(" "),e("li",[e("strong",[t._v("必须联网才能工作：")]),t._v(" 受网络状况、带宽影响。")])]),t._v(" "),e("h3",{attrs:{id:"分布式版本控制系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分布式版本控制系统"}},[t._v("#")]),t._v(" 分布式版本控制系统")]),t._v(" "),e("p",[t._v("于是分布式版本控制系统（Distributed Version Control System，简称 DVCS）面世了。 Git 就是一个典型的分布式版本控制系统。")]),t._v(" "),e("p",[t._v("这类系统，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-3/分布式版本控制系统.png",alt:"分布式版本控制系统"}})]),t._v(" "),e("p",[t._v("分布式版本控制系统可以不用联网就可以工作，因为每个人的电脑上都是完整的版本库，当你修改了某个文件后，你只需要将自己的修改推送给别人就可以了。但是，在实际使用分布式版本控制系统的时候，很少会直接进行推送修改，而是使用一台充当“中央服务器”的东西。这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。")]),t._v(" "),e("p",[t._v("分布式版本控制系统的优势不单是不必联网这么简单，后面我们还会看到 Git 极其强大的分支管理等功能。")]),t._v(" "),e("h2",{attrs:{id:"认识-git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#认识-git"}},[t._v("#")]),t._v(" 认识 Git")]),t._v(" "),e("h3",{attrs:{id:"git-简史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-简史"}},[t._v("#")]),t._v(" Git 简史")]),t._v(" "),e("p",[t._v("Linux 内核项目组当时使用分布式版本控制系统 BitKeeper 来管理和维护代码。但是，后来开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统，而且对新的版本控制系统做了很多改进。")]),t._v(" "),e("h3",{attrs:{id:"git-与其他版本管理系统的主要区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-与其他版本管理系统的主要区别"}},[t._v("#")]),t._v(" Git 与其他版本管理系统的主要区别")]),t._v(" "),e("p",[t._v("Git 在保存和对待各种信息的时候与其它版本控制系统有很大差异，尽管操作起来的命令形式非常相近，理解这些差异将有助于防止你使用中的困惑。")]),t._v(" "),e("p",[t._v("下面我们主要说一个关于 Git 与其他版本管理系统的主要差别："),e("strong",[t._v("对待数据的方式")]),t._v("。")]),t._v(" "),e("p",[e("strong",[t._v("Git采用的是直接记录快照的方式，而非差异比较。我后面会详细介绍这两种方式的差别。")])]),t._v(" "),e("p",[t._v("大部分版本控制系统（CVS、Subversion、Perforce、Bazaar 等等）都是以文件变更列表的方式存储信息，这类系统"),e("strong",[t._v("将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。")])]),t._v(" "),e("p",[t._v("具体原理如下图所示，理解起来其实很简单，每当我们提交更新一个文件之后，系统都会记录这个文件做了哪些更新，以增量符号Δ(Delta)表示。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-3deltas.png",width:"500px"}}),t._v(" "),e("br")]),t._v(" "),e("p",[e("strong",[t._v("我们怎样才能得到一个文件的最终版本呢？")])]),t._v(" "),e("p",[t._v("很简单，高中数学的基本知识，我们只需要将这些原文件和这些增加进行相加就行了。")]),t._v(" "),e("p",[e("strong",[t._v("这种方式有什么问题呢？")])]),t._v(" "),e("p",[t._v("比如我们的增量特别特别多的话，如果我们要得到最终的文件是不是会耗费时间和性能。")]),t._v(" "),e("p",[t._v("Git 不按照以上方式对待或保存数据。 反之，Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 "),e("strong",[t._v("快照流")]),t._v("。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-3snapshots.png",width:"500px"}}),t._v(" "),e("br")]),t._v(" "),e("h3",{attrs:{id:"git-的三种状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-的三种状态"}},[t._v("#")]),t._v(" Git 的三种状态")]),t._v(" "),e("p",[t._v("Git 有三种状态，你的文件可能处于其中之一：")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("已提交（committed）")]),t._v("：数据已经安全的保存在本地数据库中。")]),t._v(" "),e("li",[e("strong",[t._v("已修改（modified）")]),t._v("：已修改表示修改了文件，但还没保存到数据库中。")]),t._v(" "),e("li",[e("strong",[t._v("已暂存（staged）")]),t._v("：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。")])]),t._v(" "),e("p",[t._v("由此引入 Git 项目的三个工作区域的概念："),e("strong",[t._v("Git 仓库(.git directory)")]),t._v("、"),e("strong",[t._v("工作目录(Working Directory)")]),t._v(" 以及 "),e("strong",[t._v("暂存区域(Staging Area)")]),t._v(" 。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-3areas.png",width:"500px"}})]),t._v(" "),e("p",[e("strong",[t._v("基本的 Git 工作流程如下：")])]),t._v(" "),e("ol",[e("li",[t._v("在工作目录中修改文件。")]),t._v(" "),e("li",[t._v("暂存文件，将文件的快照放入暂存区域。")]),t._v(" "),e("li",[t._v("提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。")])]),t._v(" "),e("h2",{attrs:{id:"git-使用快速入门"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-使用快速入门"}},[t._v("#")]),t._v(" Git 使用快速入门")]),t._v(" "),e("h3",{attrs:{id:"获取-git-仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取-git-仓库"}},[t._v("#")]),t._v(" 获取 Git 仓库")]),t._v(" "),e("p",[t._v("有两种取得 Git 项目仓库的方法。")]),t._v(" "),e("ol",[e("li",[t._v("在现有目录中初始化仓库: 进入项目目录运行  "),e("code",[t._v("git init")]),t._v("  命令,该命令将创建一个名为 "),e("code",[t._v(".git")]),t._v(" 的子目录。")]),t._v(" "),e("li",[t._v("从一个服务器克隆一个现有的 Git 仓库: "),e("code",[t._v("git clone [url]")]),t._v(" 自定义本地仓库的名字: "),e("code",[t._v("git clone [url] directoryname")])])]),t._v(" "),e("h3",{attrs:{id:"记录每次更新到仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#记录每次更新到仓库"}},[t._v("#")]),t._v(" 记录每次更新到仓库")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("检测当前文件状态")]),t._v(" : "),e("code",[t._v("git status")])]),t._v(" "),e("li",[e("strong",[t._v("提出更改（把它们添加到暂存区")]),t._v("）："),e("code",[t._v("git add filename")]),t._v(" (针对特定文件)、"),e("code",[t._v("git add *")]),t._v("(所有文件)、"),e("code",[t._v("git add *.txt")]),t._v("（支持通配符，所有 .txt 文件）")]),t._v(" "),e("li",[e("strong",[t._v("忽略文件")]),t._v("："),e("code",[t._v(".gitignore")]),t._v(" 文件")]),t._v(" "),e("li",[e("strong",[t._v("提交更新:")]),t._v(" "),e("code",[t._v('git commit -m "代码提交信息"')]),t._v(" （每次准备提交前，先用 "),e("code",[t._v("git status")]),t._v(" 看下，是不是都已暂存起来了， 然后再运行提交命令 "),e("code",[t._v("git commit")]),t._v("）")]),t._v(" "),e("li",[e("strong",[t._v("跳过使用暂存区域更新的方式")]),t._v(" : "),e("code",[t._v('git commit -a -m "代码提交信息"')]),t._v("。 "),e("code",[t._v("git commit")]),t._v(" 加上 "),e("code",[t._v("-a")]),t._v(" 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 "),e("code",[t._v("git add")]),t._v(" 步骤。")]),t._v(" "),e("li",[e("strong",[t._v("移除文件")]),t._v(" ："),e("code",[t._v("git rm filename")]),t._v("  （从暂存区域移除，然后提交。）")]),t._v(" "),e("li",[e("strong",[t._v("对文件重命名")]),t._v(" ："),e("code",[t._v("git mv README.md README")]),t._v("(这个命令相当于"),e("code",[t._v("mv README.md README")]),t._v("、"),e("code",[t._v("git rm README.md")]),t._v("、"),e("code",[t._v("git add README")]),t._v(" 这三条命令的集合)")])]),t._v(" "),e("h3",{attrs:{id:"一个好的-git-提交消息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一个好的-git-提交消息"}},[t._v("#")]),t._v(" 一个好的 Git 提交消息")]),t._v(" "),e("p",[t._v("一个好的 Git 提交消息如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('标题行：用这一行来描述和解释你的这次提交\n\n主体部分可以是很少的几行，来加入更多的细节来解释提交，最好是能给出一些相关的背景或者解释这个提交能修复和解决什么问题。\n\n主体部分当然也可以有几段，但是一定要注意换行和句子不要太长。因为这样在使用 "git log" 的时候会有缩进比较好看。\n')])])]),e("p",[t._v("提交的标题行描述应该尽量的清晰和尽量的一句话概括。这样就方便相关的 Git 日志查看工具显示和其他人的阅读。")]),t._v(" "),e("h3",{attrs:{id:"推送改动到远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#推送改动到远程仓库"}},[t._v("#")]),t._v(" 推送改动到远程仓库")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加："),e("code",[t._v("git remote add origin <server>")]),t._v(" ,比如我们要让本地的一个仓库和 Github 上创建的一个仓库关联可以这样"),e("code",[t._v("git remote add origin https://github.com/Snailclimb/test.git")])])]),t._v(" "),e("li",[e("p",[t._v("将这些改动提交到远端仓库："),e("code",[t._v("git push origin master")]),t._v(" (可以把 "),e("em",[t._v("master")]),t._v(" 换成你想要推送的任何分支)")]),t._v(" "),e("p",[t._v("如此你就能够将你的改动推送到所添加的服务器上去了。")])])]),t._v(" "),e("h3",{attrs:{id:"远程仓库的移除与重命名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库的移除与重命名"}},[t._v("#")]),t._v(" 远程仓库的移除与重命名")]),t._v(" "),e("ul",[e("li",[t._v("将 test 重命名为 test1："),e("code",[t._v("git remote rename test test1")])]),t._v(" "),e("li",[t._v("移除远程仓库 test1:"),e("code",[t._v("git remote rm test1")])])]),t._v(" "),e("h3",{attrs:{id:"查看提交历史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看提交历史"}},[t._v("#")]),t._v(" 查看提交历史")]),t._v(" "),e("p",[t._v("在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。 完成这个任务最简单而又有效的工具是 "),e("code",[t._v("git log")]),t._v(" 命令。"),e("code",[t._v("git log")]),t._v(" 会按提交时间列出所有的更新，最近的更新排在最上面。")]),t._v(" "),e("p",[e("strong",[t._v("可以添加一些参数来查看自己希望看到的内容：")])]),t._v(" "),e("p",[t._v("只看某个人的提交记录：")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --author"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("bob\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h3",{attrs:{id:"撤销操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤销操作"}},[t._v("#")]),t._v(" 撤销操作")]),t._v(" "),e("p",[t._v("有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 "),e("code",[t._v("--amend")]),t._v(" 选项的提交命令尝试重新提交：")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("取消暂存的文件")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset filename\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("撤消对文件的修改:")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -- filename\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch origin\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard origin/master\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("h3",{attrs:{id:"分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),e("p",[t._v("分支是用来将特性开发绝缘开来的。在你创建仓库的时候，"),e("em",[t._v("master")]),t._v(" 是“默认”的分支。在其他分支上进行开发，完成后再将它们合并到主分支上。")]),t._v(" "),e("p",[t._v("我们通常在开发新功能、修复一个紧急 bug 等等时候会选择创建分支。单分支开发好还是多分支开发好，还是要看具体场景来说。")]),t._v(" "),e("p",[t._v("创建一个名字叫做 test 的分支")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("切换当前分支到 test（当你切换分支的时候，Git 会重置你的工作目录，使其看起来像回到了你在那个分支上最后一次提交的样子。 Git 会自动添加、删除、修改文件以确保此时你的工作目录和这个分支最后一次提交时的样子一模一样）")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-3切换分支.png",width:"500px"}})]),t._v(" "),e("p",[t._v("你也可以直接这样创建分支并切换过去(上面两条命令的合写)")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b feature_x\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("切换到主分支")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("合并分支(可能会有冲突)")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("把新建的分支删掉")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d feature_x\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("将分支推送到远端仓库（推送成功后其他人可见）：")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h2",{attrs:{id:"推荐"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#推荐"}},[t._v("#")]),t._v(" 推荐")]),t._v(" "),e("p",[e("strong",[t._v("在线演示学习工具：")])]),t._v(" "),e("p",[t._v("「补充，来自"),e("a",{attrs:{href:"https://github.com/Snailclimb/JavaGuide/issues/729",target:"_blank",rel:"noopener noreferrer"}},[t._v("issue729"),e("OutboundLink")],1),t._v("」Learn Git Branching https://oschina.gitee.io/learn-git-branching/ 。该网站可以方便的演示基本的git操作，讲解得明明白白。每一个基本命令的作用和结果。")]),t._v(" "),e("p",[e("strong",[t._v("推荐阅读：")])]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://rogerdudler.github.io/git-guide/index.zh.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git - 简明指南"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://marklodato.github.io/visual-git-guide/index-zh-cn.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解Git"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://backlog.com/git-tutorial/cn/intro/intro1_1.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("猴子都能懂得Git入门"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("https://git-scm.com/book/en/v2")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent",target:"_blank",rel:"noopener noreferrer"}},[t._v("Generating a new SSH key and adding it to the ssh-agent"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/torvalds/subsurface-for-dirk/blob/a48494d2fbed58c751e9b7e8fbff88582f9b2d02/README#L88",target:"_blank",rel:"noopener noreferrer"}},[t._v("一个好的 Git 提交消息，出自 Linus 之手"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=r.exports}}]);