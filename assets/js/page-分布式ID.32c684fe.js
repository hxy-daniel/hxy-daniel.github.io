(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{767:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"分布式-id"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式-id"}},[t._v("#")]),t._v(" 分布式 ID")]),t._v(" "),a("h2",{attrs:{id:"分布式-id-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式-id-介绍"}},[t._v("#")]),t._v(" 分布式 ID 介绍")]),t._v(" "),a("h3",{attrs:{id:"何为-id"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何为-id"}},[t._v("#")]),t._v(" 何为 ID？")]),t._v(" "),a("p",[t._v("日常开发中，我们需要对系统中的各种数据使用 ID 唯一表示，比如用户 ID 对应且仅对应一个人，商品 ID 对应且仅对应一件商品，订单 ID 对应且仅对应一个订单。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/javaguide/up-79beb853b8319f850638c9708f83039dfda.png",alt:""}})]),t._v(" "),a("p",[t._v("我们现实生活中也有各种 ID，比如身份证 ID 对应且仅对应一个人、地址 ID 对应且仅对应")]),t._v(" "),a("p",[t._v("简单来说，"),a("strong",[t._v("ID 就是数据的唯一标识")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"何为分布式-id"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何为分布式-id"}},[t._v("#")]),t._v(" 何为分布式 ID？")]),t._v(" "),a("p",[t._v("分布式 ID 是分布式系统下的 ID。分布式 ID 不存在与现实生活中，属于计算机系统中的一个概念。")]),t._v(" "),a("p",[t._v("我简单举一个分库分表的例子。")]),t._v(" "),a("p",[t._v("我司的一个项目，使用的是单机 MySQL 。但是，没想到的是，项目上线一个月之后，随着使用人数越来越多，整个系统的数据量将越来越大。")]),t._v(" "),a("p",[t._v("单机 MySQL 已经没办法支撑了，需要进行分库分表（推荐 Sharding-JDBC）。")]),t._v(" "),a("p",[t._v("在分库之后， 数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。"),a("strong",[t._v("我们如何为不同的数据节点生成全局唯一主键呢？")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-d78d9d5362c71f4713a090baf7ec65d2b6d.png",alt:""}})]),t._v(" "),a("p",[t._v("这个时候就需要生成"),a("strong",[t._v("分布式 ID")]),t._v("了。")]),t._v(" "),a("h3",{attrs:{id:"分布式-id-需要满足哪些要求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式-id-需要满足哪些要求"}},[t._v("#")]),t._v(" 分布式 ID 需要满足哪些要求?")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210610082309988.png",alt:""}})]),t._v(" "),a("p",[t._v("分布式 ID 作为分布式系统中必不可少的一环，很多地方都要用到分布式 ID。")]),t._v(" "),a("p",[t._v("一个最基本的分布式 ID 需要满足下面这些要求：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("全局唯一")]),t._v(" ：ID 的全局唯一性肯定是首先要满足的！")]),t._v(" "),a("li",[a("strong",[t._v("高性能")]),t._v(" ： 分布式 ID 的生成速度要快，对本地资源消耗要小。")]),t._v(" "),a("li",[a("strong",[t._v("高可用")]),t._v(" ：生成分布式 ID 的服务要保证可用性无限接近于 100%。")]),t._v(" "),a("li",[a("strong",[t._v("方便易用")]),t._v(" ：拿来即用，使用方便，快速接入！")])]),t._v(" "),a("p",[t._v("除了这些之外，一个比较好的分布式 ID 还应保证：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("安全")]),t._v(" ：ID 中不包含敏感信息。")]),t._v(" "),a("li",[a("strong",[t._v("有序递增")]),t._v(" ：如果要把 ID 存放在数据库的话，ID 的有序性可以提升数据库写入速度。并且，很多时候 ，我们还很有可能会直接通过 ID 来进行排序。")]),t._v(" "),a("li",[a("strong",[t._v("有具体的业务含义")]),t._v(" ：生成的 ID 如果能有具体的业务含义，可以让定位问题以及开发更透明化（通过 ID 就能确定是哪个业务）。")]),t._v(" "),a("li",[a("strong",[t._v("独立部署")]),t._v(" ：也就是分布式系统单独有一个发号器服务，专门用来生成分布式 ID。这样就生成 ID 的服务可以和业务相关的服务解耦。不过，这样同样带来了网络调用消耗增加的问题。总的来说，如果需要用到分布式 ID 的场景比较多的话，独立部署的发号器服务还是很有必要的。")])]),t._v(" "),a("h2",{attrs:{id:"分布式-id-常见解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式-id-常见解决方案"}},[t._v("#")]),t._v(" 分布式 ID 常见解决方案")]),t._v(" "),a("h3",{attrs:{id:"数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库"}},[t._v("#")]),t._v(" 数据库")]),t._v(" "),a("h4",{attrs:{id:"数据库主键自增"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库主键自增"}},[t._v("#")]),t._v(" 数据库主键自增")]),t._v(" "),a("p",[t._v("这种方式就比较简单直白了，就是通过关系型数据库的自增主键产生来唯一的 ID。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210610081957287.png",alt:""}})]),t._v(" "),a("p",[t._v("以 MySQL 举例，我们通过下面的方式即可。")]),t._v(" "),a("p",[a("strong",[t._v("1.创建一个数据库表。")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("sequence_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bigint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTO_INCREMENT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("stub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("stub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("stub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENGINE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("InnoDB")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHARSET")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf8mb4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[a("code",[t._v("stub")]),t._v(" 字段无意义，只是为了占位，便于我们插入或者修改数据。并且，给 "),a("code",[t._v("stub")]),t._v(" 字段创建了唯一索引，保证其唯一性。")]),t._v(" "),a("p",[a("strong",[t._v("2.通过 "),a("code",[t._v("replace into")]),t._v(" 来插入数据。")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("BEGIN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nREPLACE "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("INTO")]),t._v(" sequence_id "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" VALUES "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stub'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LAST_INSERT_ID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nCOMMIT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("插入数据这里，我们没有使用 "),a("code",[t._v("insert into")]),t._v(" 而是使用 "),a("code",[t._v("replace into")]),t._v(" 来插入数据，具体步骤是这样的：")]),t._v(" "),a("p",[t._v("1)第一步： 尝试把数据插入到表中。")]),t._v(" "),a("p",[t._v("2)第二步： 如果主键或唯一索引字段出现重复数据错误而插入失败时，先从表中删除含有重复关键字值的冲突行，然后再次尝试把数据插入到表中。")]),t._v(" "),a("p",[t._v("这种方式的优缺点也比较明显：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("优点")]),t._v(" ：实现起来比较简单、ID 有序递增、存储消耗空间小")]),t._v(" "),a("li",[a("strong",[t._v("缺点")]),t._v(" ： 支持的并发量不大、存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）、ID 没有具体业务含义、安全问题（比如根据订单 ID 的递增规律就能推算出每天的订单量，商业机密啊！ ）、每次获取 ID 都要访问一次数据库（增加了对数据库的压力，获取速度也慢）")])]),t._v(" "),a("h4",{attrs:{id:"数据库号段模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库号段模式"}},[t._v("#")]),t._v(" 数据库号段模式")]),t._v(" "),a("p",[t._v("数据库主键自增这种模式，每次获取 ID 都要访问一次数据库，ID 需求比较大的时候，肯定是不行的。")]),t._v(" "),a("p",[t._v("如果我们可以批量获取，然后存在在内存里面，需要用到的时候，直接从内存里面拿就舒服了！这也就是我们说的 "),a("strong",[t._v("基于数据库的号段模式来生成分布式 ID。")])]),t._v(" "),a("p",[t._v("数据库的号段模式也是目前比较主流的一种分布式 ID 生成方式。像滴滴开源的"),a("a",{attrs:{href:"https://github.com/didi/tinyid/wiki/tinyid%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tinyid"),a("OutboundLink")],1),t._v(" 就是基于这种方式来做的。不过，TinyId 使用了双号段缓存、增加多 db 支持等方式来进一步优化。")]),t._v(" "),a("p",[t._v("以 MySQL 举例，我们通过下面的方式即可。")]),t._v(" "),a("p",[a("strong",[t._v("1.创建一个数据库表。")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("sequence_id_generator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("current_max_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bigint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'当前最大id'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'号段的长度'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'版本号'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("biz_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'业务类型'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENGINE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("InnoDB")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHARSET")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf8mb4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[a("code",[t._v("current_max_id")]),t._v(" 字段和"),a("code",[t._v("step")]),t._v("字段主要用于获取批量 ID，获取的批量 id 为： "),a("code",[t._v("current_max_id ~ current_max_id+step")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210610081149228.png",alt:""}})]),t._v(" "),a("p",[a("code",[t._v("version")]),t._v(" 字段主要用于解决并发问题（乐观锁）,"),a("code",[t._v("biz_type")]),t._v(" 主要用于表示业余类型。")]),t._v(" "),a("p",[a("strong",[t._v("2.先插入一行数据。")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("sequence_id_generator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("current_max_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("biz_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("101")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[a("strong",[t._v("3.通过 SELECT 获取指定业务下的批量唯一 ID")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("current_max_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("sequence_id_generator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("biz_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("101")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("结果：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("id\tcurrent_max_id\tstep\tversion\tbiz_type\n1\t0\t100\t1\t101\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("strong",[t._v("4.不够用的话，更新之后重新 SELECT 即可。")])]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" sequence_id_generator "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" current_max_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" version"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("version"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" version "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("biz_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("101")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("current_max_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("sequence_id_generator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("biz_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("101")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("结果：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("id\tcurrent_max_id\tstep\tversion\tbiz_type\n1\t100\t100\t1\t101\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("相比于数据库主键自增的方式，"),a("strong",[t._v("数据库的号段模式对于数据库的访问次数更少，数据库压力更小。")])]),t._v(" "),a("p",[t._v("另外，为了避免单点问题，你可以从使用主从模式来提高可用性。")]),t._v(" "),a("p",[a("strong",[t._v("数据库号段模式的优缺点:")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("优点")]),t._v(" ：ID 有序递增、存储消耗空间小")]),t._v(" "),a("li",[a("strong",[t._v("缺点")]),t._v(" ：存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）、ID 没有具体业务含义、安全问题（比如根据订单 ID 的递增规律就能推算出每天的订单量，商业机密啊！ ）")])]),t._v(" "),a("h4",{attrs:{id:"nosql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nosql"}},[t._v("#")]),t._v(" NoSQL")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2021061008245858.png",alt:""}})]),t._v(" "),a("p",[t._v("一般情况下，NoSQL 方案使用 Redis 多一些。我们通过 Redis 的 "),a("code",[t._v("incr")]),t._v(" 命令即可实现对 id 原子顺序递增。")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("9")]),t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" sequence_id_biz_type "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nOK\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("9")]),t._v(">")]),t._v(" incr sequence_id_biz_type\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("9")]),t._v(">")]),t._v(" get sequence_id_biz_type\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("为了提高可用性和并发，我们可以使用 Redis Cluser。Redis Cluser 是 Redis 官方提供的 Redis 集群解决方案（3.0+版本）。")]),t._v(" "),a("p",[t._v("除了 Redis Cluser 之外，你也可以使用开源的 Redis 集群方案"),a("a",{attrs:{href:"https://github.com/CodisLabs/codis",target:"_blank",rel:"noopener noreferrer"}},[t._v("Codis"),a("OutboundLink")],1),t._v(" （大规模集群比如上百个节点的时候比较推荐）。")]),t._v(" "),a("p",[t._v("除了高可用和并发之外，我们知道 Redis 基于内存，我们需要持久化数据，避免重启机器或者机器故障后数据丢失。Redis 支持两种不同的持久化方式："),a("strong",[t._v("快照（snapshotting，RDB）")]),t._v("、"),a("strong",[t._v("只追加文件（append-only file, AOF）")]),t._v("。 并且，Redis 4.0 开始支持 "),a("strong",[t._v("RDB 和 AOF 的混合持久化")]),t._v("（默认关闭，可以通过配置项 "),a("code",[t._v("aof-use-rdb-preamble")]),t._v(" 开启）。")]),t._v(" "),a("p",[t._v("关于 Redis 持久化，我这里就不过多介绍。不了解这部分内容的小伙伴，可以看看 "),a("a",{attrs:{href:"https://snailclimb.gitee.io/javaguide/#/docs/database/Redis/redis-all",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaGuide 对于 Redis 知识点的总结"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("Redis 方案的优缺点：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("优点")]),t._v(" ： 性能不错并且生成的 ID 是有序递增的")]),t._v(" "),a("li",[a("strong",[t._v("缺点")]),t._v(" ： 和数据库主键自增方案的缺点类似")])]),t._v(" "),a("p",[t._v("除了 Redis 之外，MongoDB ObjectId 经常也会被拿来当做分布式 ID 的解决方案。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210207103320582.png",alt:""}})]),t._v(" "),a("p",[t._v("MongoDB ObjectId 一共需要 12 个字节存储：")]),t._v(" "),a("ul",[a("li",[t._v("0~3：时间戳")]),t._v(" "),a("li",[t._v("3~6： 代表机器 ID")]),t._v(" "),a("li",[t._v("7~8：机器进程 ID")]),t._v(" "),a("li",[t._v("9~11 ：自增值")])]),t._v(" "),a("p",[a("strong",[t._v("MongoDB 方案的优缺点：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("优点")]),t._v(" ： 性能不错并且生成的 ID 是有序递增的")]),t._v(" "),a("li",[a("strong",[t._v("缺点")]),t._v(" ： 需要解决重复 ID 问题（当机器时间不对的情况下，可能导致会产生重复 ID） 、有安全性问题（ID 生成有规律性）")])]),t._v(" "),a("h3",{attrs:{id:"算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),a("h4",{attrs:{id:"uuid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uuid"}},[t._v("#")]),t._v(" UUID")]),t._v(" "),a("p",[t._v("UUID 是 Universally Unique Identifier（通用唯一标识符） 的缩写。UUID 包含 32 个 16 进制数字（8-4-4-4-12）。")]),t._v(" "),a("p",[t._v("JDK 就提供了现成的生成 UUID 的方法，一行代码就行了。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出示例：cb4a9ede-fa5e-4585-b9bb-d60bce986eaa")]),t._v("\nUUID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomUUID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://tools.ietf.org/html/rfc4122",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 4122"),a("OutboundLink")],1),t._v(" 中关于 UUID 的示例是这样的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210202110824430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[t._v("我们这里重点关注一下这个 Version(版本)，不同的版本对应的 UUID 的生成规则是不同的。")]),t._v(" "),a("p",[t._v("5 种不同的 Version(版本)值分别对应的含义（参考"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("维基百科对于 UUID 的介绍"),a("OutboundLink")],1),t._v("）：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("版本 1")]),t._v(" : UUID 是根据时间和节点 ID（通常是 MAC 地址）生成；")]),t._v(" "),a("li",[a("strong",[t._v("版本 2")]),t._v(" : UUID 是根据标识符（通常是组或用户 ID）、时间和节点 ID 生成；")]),t._v(" "),a("li",[a("strong",[t._v("版本 3、版本 5")]),t._v(" : 版本 5 - 确定性 UUID 通过散列（hashing）名字空间（namespace）标识符和名称生成；")]),t._v(" "),a("li",[a("strong",[t._v("版本 4")]),t._v(" : UUID 使用"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[t._v("随机性"),a("OutboundLink")],1),t._v("或"),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[t._v("伪随机性"),a("OutboundLink")],1),t._v("生成。")])]),t._v(" "),a("p",[t._v("下面是 Version 1 版本下生成的 UUID 的示例：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210202113013477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),a("p",[t._v("JDK 中通过 "),a("code",[t._v("UUID")]),t._v(" 的 "),a("code",[t._v("randomUUID()")]),t._v(" 方法生成的 UUID 的版本默认为 4。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UUID")]),t._v(" uuid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" UUID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("randomUUID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" version "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" uuid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("另外，Variant(变体)也有 4 种不同的值，这种值分别对应不同的含义。这里就不介绍了，貌似平时也不怎么需要关注。")]),t._v(" "),a("p",[t._v("需要用到的时候，去看看维基百科对于 UUID 的 Variant(变体) 相关的介绍即可。")]),t._v(" "),a("p",[t._v("从上面的介绍中可以看出，UUID 可以保证唯一性，因为其生成规则包括 MAC 地址、时间戳、名字空间（Namespace）、随机或伪随机数、时序等元素，计算机基于这些规则生成的 UUID 是肯定不会重复的。")]),t._v(" "),a("p",[t._v("虽然，UUID 可以做到全局唯一性，但是，我们一般很少会使用它。")]),t._v(" "),a("p",[t._v("比如使用 UUID 作为 MySQL 数据库主键的时候就非常不合适：")]),t._v(" "),a("ul",[a("li",[t._v("数据库主键要尽量越短越好，而 UUID 的消耗的存储空间比较大（32 个字符串，128 位）。")]),t._v(" "),a("li",[t._v("UUID 是无顺序的，InnoDB 引擎下，数据库主键的无序性会严重影响数据库性能。")])]),t._v(" "),a("p",[t._v("最后，我们再简单分析一下 "),a("strong",[t._v("UUID 的优缺点")]),t._v(" （面试的时候可能会被问到的哦！） :")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("优点")]),t._v(" ：生成速度比较快、简单易用")]),t._v(" "),a("li",[a("strong",[t._v("缺点")]),t._v(" ： 存储消耗空间大（32 个字符串，128 位） 、 不安全（基于 MAC 地址生成 UUID 的算法会造成 MAC 地址泄露)、无序（非自增）、没有具体业务含义、需要解决重复 ID 问题（当机器时间不对的情况下，可能导致会产生重复 ID）")])]),t._v(" "),a("h4",{attrs:{id:"snowflake-雪花算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#snowflake-雪花算法"}},[t._v("#")]),t._v(" Snowflake(雪花算法)")]),t._v(" "),a("p",[t._v("Snowflake 是 Twitter 开源的分布式 ID 生成算法。Snowflake 由 64 bit 的二进制数字组成，这 64bit 的二进制被分成了几部分，每一部分存储的数据都有特定的含义：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("第 0 位")]),t._v("： 符号位（标识正负），始终为 0，没有用，不用管。")]),t._v(" "),a("li",[a("strong",[t._v("第 1~41 位")]),t._v(" ：一共 41 位，用来表示时间戳，单位是毫秒，可以支撑 2 ^41 毫秒（约 69 年）")]),t._v(" "),a("li",[a("strong",[t._v("第 42~52 位")]),t._v(" ：一共 10 位，一般来说，前 5 位表示机房 ID，后 5 位表示机器 ID（实际项目中可以根据实际情况调整）。这样就可以区分不同集群/机房的节点。")]),t._v(" "),a("li",[a("strong",[t._v("第 53~64 位")]),t._v(" ：一共 12 位，用来表示序列号。 序列号为自增值，代表单台机器每毫秒能够产生的最大 ID 数(2^12 = 4096),也就是说单台机器每毫秒最多可以生成 4096 个 唯一 ID。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-a7e54a77b5ab1d9fa16d5ae3a3c50c5aee9.png",alt:""}})]),t._v(" "),a("p",[t._v("如果你想要使用 Snowflake 算法的话，一般不需要你自己再造轮子。有很多基于 Snowflake 算法的开源实现比如美团 的 Leaf、百度的 UidGenerator，并且这些开源实现对原有的 Snowflake 算法进行了优化。")]),t._v(" "),a("p",[t._v("另外，在实际项目中，我们一般也会对 Snowflake 算法进行改造，最常见的就是在 Snowflake 算法生成的 ID 中加入业务类型信息。")]),t._v(" "),a("p",[t._v("我们再来看看 Snowflake 算法的优缺点 ：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("优点")]),t._v(" ：生成速度比较快、生成的 ID 有序递增、比较灵活（可以对 Snowflake 算法进行简单的改造比如加入业务 ID）")]),t._v(" "),a("li",[a("strong",[t._v("缺点")]),t._v(" ： 需要解决重复 ID 问题（依赖时间，当机器时间不对的情况下，可能导致会产生重复 ID）。")])]),t._v(" "),a("h3",{attrs:{id:"开源框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开源框架"}},[t._v("#")]),t._v(" 开源框架")]),t._v(" "),a("h4",{attrs:{id:"uidgenerator-百度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uidgenerator-百度"}},[t._v("#")]),t._v(" UidGenerator(百度)")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/baidu/uid-generator",target:"_blank",rel:"noopener noreferrer"}},[t._v("UidGenerator"),a("OutboundLink")],1),t._v(" 是百度开源的一款基于 Snowflake(雪花算法)的唯一 ID 生成器。")]),t._v(" "),a("p",[t._v("不过，UidGenerator 对 Snowflake(雪花算法)进行了改进，生成的唯一 ID 组成如下。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-ad5b9dd0077a949db923611b2450277e406.png",alt:""}})]),t._v(" "),a("p",[t._v("可以看出，和原始 Snowflake(雪花算法)生成的唯一 ID 的组成不太一样。并且，上面这些参数我们都可以自定义。")]),t._v(" "),a("p",[t._v("UidGenerator 官方文档中的介绍如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-358b1a4cddb3675018b8595f66ece9cae88.png",alt:""}})]),t._v(" "),a("p",[t._v("自 18 年后，UidGenerator 就基本没有再维护了，我这里也不过多介绍。想要进一步了解的朋友，可以看看 "),a("a",{attrs:{href:"https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("UidGenerator 的官方介绍"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"leaf-美团"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leaf-美团"}},[t._v("#")]),t._v(" Leaf(美团)")]),t._v(" "),a("p",[a("strong",[a("a",{attrs:{href:"https://github.com/Meituan-Dianping/Leaf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Leaf"),a("OutboundLink")],1)]),t._v(" 是美团开源的一个分布式 ID 解决方案 。这个项目的名字 Leaf（树叶） 起源于德国哲学家、数学家莱布尼茨的一句话： “There are no two identical leaves in the world”（世界上没有两片相同的树叶） 。这名字起得真心挺不错的，有点文艺青年那味了！")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210422145229617.png",alt:""}})]),t._v(" "),a("p",[t._v("Leaf 提供了 "),a("strong",[t._v("号段模式")]),t._v(" 和 "),a("strong",[t._v("Snowflake(雪花算法)")]),t._v(" 这两种模式来生成分布式 ID。并且，它支持双号段，还解决了雪花 ID 系统时钟回拨问题。不过，时钟问题的解决需要弱依赖于 Zookeeper 。")]),t._v(" "),a("p",[t._v("Leaf 的诞生主要是为了解决美团各个业务线生成分布式 ID 的方法多种多样以及不可靠的问题。")]),t._v(" "),a("p",[t._v("Leaf 对原有的号段模式进行改进，比如它这里增加了双号段避免获取 DB 在获取号段的时候阻塞请求获取 ID 的线程。简单来说，就是我一个号段还没用完之前，我自己就主动提前去获取下一个号段（图片来自于美团官方文章："),a("a",{attrs:{href:"https://tech.meituan.com/2017/04/21/mt-leaf.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Leaf——美团点评分布式 ID 生成系统》"),a("OutboundLink")],1),t._v("）。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210422144846724.png",alt:""}})]),t._v(" "),a("p",[t._v("根据项目 README 介绍，在 4C8G VM 基础上，通过公司 RPC 方式调用，QPS 压测结果近 5w/s，TP999 1ms。")]),t._v(" "),a("h4",{attrs:{id:"tinyid-滴滴"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tinyid-滴滴"}},[t._v("#")]),t._v(" Tinyid(滴滴)")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/didi/tinyid",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tinyid"),a("OutboundLink")],1),t._v(" 是滴滴开源的一款基于数据库号段模式的唯一 ID 生成器。")]),t._v(" "),a("p",[t._v("数据库号段模式的原理我们在上面已经介绍过了。"),a("strong",[t._v("Tinyid 有哪些亮点呢？")])]),t._v(" "),a("p",[t._v("为了搞清楚这个问题，我们先来看看基于数据库号段模式的简单架构方案。（图片来自于 Tinyid 的官方 wiki:"),a("a",{attrs:{href:"https://github.com/didi/tinyid/wiki/tinyid%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Tinyid 原理介绍》"),a("OutboundLink")],1),t._v("）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-4afc0e45c0c86ba5ad645d023dce11e53c2.png",alt:""}})]),t._v(" "),a("p",[t._v("在这种架构模式下，我们通过 HTTP 请求向发号器服务申请唯一 ID。负载均衡 router 会把我们的请求送往其中的一台 tinyid-server。")]),t._v(" "),a("p",[t._v("这种方案有什么问题呢？在我看来（Tinyid 官方 wiki 也有介绍到），主要由下面这 2 个问题：")]),t._v(" "),a("ul",[a("li",[t._v("获取新号段的情况下，程序获取唯一 ID 的速度比较慢。")]),t._v(" "),a("li",[t._v("需要保证 DB 高可用，这个是比较麻烦且耗费资源的。")])]),t._v(" "),a("p",[t._v("除此之外，HTTP 调用也存在网络开销。")]),t._v(" "),a("p",[t._v("Tinyid 的原理比较简单，其架构如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-53f74cd615178046d6c04fe50513fee74ce.png",alt:""}})]),t._v(" "),a("p",[t._v("相比于基于数据库号段模式的简单架构方案，Tinyid 方案主要做了下面这些优化：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("双号段缓存")]),t._v(" ：为了避免在获取新号段的情况下，程序获取唯一 ID 的速度比较慢。 Tinyid 中的号段在用到一定程度的时候，就会去异步加载下一个号段，保证内存中始终有可用号段。")]),t._v(" "),a("li",[a("strong",[t._v("增加多 db 支持")]),t._v(" ：支持多个 DB，并且，每个 DB 都能生成唯一 ID，提高了可用性。")]),t._v(" "),a("li",[a("strong",[t._v("增加 tinyid-client")]),t._v(" ：纯本地操作，无 HTTP 请求消耗，性能和可用性都有很大提升。")])]),t._v(" "),a("p",[t._v("Tinyid 的优缺点这里就不分析了，结合数据库号段模式的优缺点和 Tinyid 的原理就能知道。")]),t._v(" "),a("h2",{attrs:{id:"分布式-id-生成方案总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式-id-生成方案总结"}},[t._v("#")]),t._v(" 分布式 ID 生成方案总结")]),t._v(" "),a("p",[t._v("这篇文章中，我基本上已经把最常见的分布式 ID 生成方案都总结了一波。")]),t._v(" "),a("p",[t._v("除了上面介绍的方式之外，像 ZooKeeper 这类中间件也可以帮助我们生成唯一 ID。"),a("strong",[t._v("没有银弹，一定要结合实际项目来选择最适合自己的方案。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);