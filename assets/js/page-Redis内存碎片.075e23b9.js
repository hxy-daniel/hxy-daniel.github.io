(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{753:function(s,t,a){"use strict";a.r(t);var e=a(1),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"什么是内存碎片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是内存碎片"}},[s._v("#")]),s._v(" 什么是内存碎片?")]),s._v(" "),a("p",[s._v("你可以将内存碎片简单地理解为那些不可用的空闲内存。")]),s._v(" "),a("p",[s._v("举个例子：操作系统为你分配了 32 字节的连续内存空间，而你存储数据实际只需要使用 24 字节内存空间，那这多余出来的 8 字节内存空间如果后续没办法再被分配存储其他数据的话，就可以被称为内存碎片。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/memory-fragmentation.png",alt:"内存碎片"}})]),s._v(" "),a("p",[s._v("Redis 内存碎片虽然不会影响 Redis 性能，但是会增加内存消耗。")]),s._v(" "),a("h2",{attrs:{id:"为什么会有-redis-内存碎片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么会有-redis-内存碎片"}},[s._v("#")]),s._v(" 为什么会有 Redis 内存碎片?")]),s._v(" "),a("p",[s._v("Redis 内存碎片产生比较常见的 2 个原因：")]),s._v(" "),a("p",[a("strong",[s._v("1、Redis 存储存储数据的时候向操作系统申请的内存空间可能会大于数据实际需要的存储空间。")])]),s._v(" "),a("p",[s._v("以下是这段 Redis 官方的原话：")]),s._v(" "),a("blockquote",[a("p",[s._v("To store user keys, Redis allocates at most as much memory as the "),a("code",[s._v("maxmemory")]),s._v(" setting enables (however there are small extra allocations possible).")])]),s._v(" "),a("p",[s._v("Redis 使用 "),a("code",[s._v("zmalloc")]),s._v(" 方法(Redis 自己实现的内存分配方法)进行内存分配的时候，除了要分配 "),a("code",[s._v("size")]),s._v(" 大小的内存之外，还会多分配 "),a("code",[s._v("PREFIX_SIZE")]),s._v(" 大小的内存。")]),s._v(" "),a("p",[a("code",[s._v("zmalloc")]),s._v(" 方法源码如下（源码地址：https://github.com/antirez/redis-tools/blob/master/zmalloc.c）：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("zmalloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size_t size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 分配指定大小的内存")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ptr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("malloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("PREFIX_SIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("zmalloc_oom_handler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n#ifdef "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HAVE_MALLOC_SIZE")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("update_zmalloc_stat_alloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("zmalloc_size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n#"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size_t"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("update_zmalloc_stat_alloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("PREFIX_SIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("PREFIX_SIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n#endif\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("另外，Redis 可以使用多种内存分配器来分配内存（ libc、jemalloc、tcmalloc），默认使用 "),a("a",{attrs:{href:"https://github.com/jemalloc/jemalloc",target:"_blank",rel:"noopener noreferrer"}},[s._v("jemalloc"),a("OutboundLink")],1),s._v("，而 jemalloc 按照一系列固定的大小（8 字节、16 字节、32 字节......）来分配内存的。jemalloc 划分的内存单元如下图所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/6803d3929e3e46c1b1c9d0bb9ee8e717.png",alt:"jemalloc 内存单元示意图"}})]),s._v(" "),a("p",[s._v("当程序申请的内存最接近某个固定值时，jemalloc 会给它分配相应大小的空间，就比如说程序需要申请 17 字节的内存，jemalloc 会直接给它分配 32 字节的内存，这样会导致有 15 字节内存的浪费。不过，jemalloc 专门针对内存碎片问题做了优化，一般不会存在过度碎片化的问题。")]),s._v(" "),a("p",[a("strong",[s._v("2、频繁修改 Redis 中的数据也会产生内存碎片。")])]),s._v(" "),a("p",[s._v("当 Redis 中的某个数据删除时，Redis 通常不会轻易释放内存给操作系统。")]),s._v(" "),a("p",[s._v("这个在 Redis 官方文档中也有对应的原话:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/redis-docs-memory-optimization.png",alt:""}})]),s._v(" "),a("p",[s._v("文档地址：https://redis.io/topics/memory-optimization 。")]),s._v(" "),a("h2",{attrs:{id:"如何查看-redis-内存碎片的信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何查看-redis-内存碎片的信息"}},[s._v("#")]),s._v(" 如何查看 Redis 内存碎片的信息？")]),s._v(" "),a("p",[s._v("使用 "),a("code",[s._v("info memory")]),s._v(" 命令即可查看 Redis 内存相关的信息。下图中每个参数具体的含义，Redis 官方文档有详细的介绍：https://redis.io/commands/INFO 。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/redis-info-memory.png",alt:""}})]),s._v(" "),a("p",[s._v("Redis 内存碎片率的计算公式："),a("code",[s._v("mem_fragmentation_ratio")]),s._v(" （内存碎片率）= "),a("code",[s._v("used_memory_rss")]),s._v(" (操作系统实际分配给 Redis 的物理内存空间大小)/ "),a("code",[s._v("used_memory")]),s._v("(Redis 内存分配器为了存储数据实际申请使用的内存空间大小)")]),s._v(" "),a("p",[s._v("也就是说，"),a("code",[s._v("mem_fragmentation_ratio")]),s._v(" （内存碎片率）的值越大代表内存碎片率越严重。")]),s._v(" "),a("p",[s._v("一定不要误认为"),a("code",[s._v("used_memory_rss")]),s._v(" 减去 "),a("code",[s._v("used_memory")]),s._v("值就是内存碎片的大小！！！这不仅包括内存碎片，还包括其他进程开销，以及共享库、堆栈等的开销。")]),s._v(" "),a("p",[s._v("很多小伙伴可能要问了：“多大的内存碎片率才是需要清理呢？”。")]),s._v(" "),a("p",[s._v("通常情况下，我们认为 "),a("code",[s._v("mem_fragmentation_ratio > 1.5")]),s._v(" 的话才需要清理内存碎片。 "),a("code",[s._v("mem_fragmentation_ratio > 1.5")]),s._v(" 意味着你使用 Redis 存储实际大小 2G 的数据需要使用大于 3G 的内存。")]),s._v(" "),a("p",[s._v("如果想要快速查看内存碎片率的话，你还可以通过下面这个命令：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" redis-cli -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v(" info "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" mem_fragmentation_ratio\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("另外，内存碎片率可能存在小于 1 的情况。这种情况我在日常使用中还没有遇到过，感兴趣的小伙伴可以看看这篇文章 "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s/drlDvp7bfq5jt2M5pTqJCw",target:"_blank",rel:"noopener noreferrer"}},[s._v("故障分析 | Redis 内存碎片率太低该怎么办？- 爱可生开源社区"),a("OutboundLink")],1),s._v(" 。")]),s._v(" "),a("h2",{attrs:{id:"如何清理-redis-内存碎片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何清理-redis-内存碎片"}},[s._v("#")]),s._v(" 如何清理 Redis 内存碎片？")]),s._v(" "),a("p",[s._v("Redis4.0-RC3 版本以后自带了内存整理，可以避免内存碎片率过大的问题。")]),s._v(" "),a("p",[s._v("直接通过 "),a("code",[s._v("config set")]),s._v(" 命令将 "),a("code",[s._v("activedefrag")]),s._v(" 配置项设置为 "),a("code",[s._v("yes")]),s._v(" 即可。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("config "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" activedefrag "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("yes")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("具体什么时候清理需要通过下面两个参数控制：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 内存碎片占用空间达到 500mb 的时候开始清理")]),s._v("\nconfig "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" active-defrag-ignore-bytes 500mb\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 内存碎片率大于 1.5 的时候开始清理")]),s._v("\nconfig "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" active-defrag-threshold-lower "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("通过 Redis 自动内存碎片清理机制可能会对 Redis 的性能产生影响，我们可以通过下面两个参数来减少对 Redis 性能的影响：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 内存碎片清理所占用 CPU 时间的比例不低于 20%")]),s._v("\nconfig "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" active-defrag-cycle-min "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 内存碎片清理所占用 CPU 时间的比例不高于 50%")]),s._v("\nconfig "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" active-defrag-cycle-max "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("另外，重启节点可以做到内存碎片重新整理。如果你采用的是高可用架构的 Redis 集群的话，你可以将碎片率过高的主节点转换为从节点，以便进行安全重启。")]),s._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),a("ul",[a("li",[s._v("Redis 官方文档：https://redis.io/topics/memory-optimization")]),s._v(" "),a("li",[s._v("Redis 核心技术与实战 - 极客时间 - 删除数据后，为什么内存占用率还是很高？：https://time.geekbang.org/column/article/289140")]),s._v(" "),a("li",[s._v("Redis 源码解析——内存分配：https://shinerio.cc/2020/05/17/redis/Redis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/")])])])}),[],!1,null,null,null);t.default=n.exports}}]);