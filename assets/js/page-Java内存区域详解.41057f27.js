(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{244:function(s,t,a){s.exports=a.p+"assets/img/Java运行时数据区域JDK1.8.37016205.png"},688:function(s,t,a){s.exports=a.p+"assets/img/JVM运行时数据区域.150c33e1.png"},689:function(s,t,a){s.exports=a.p+"assets/img/《深入理解虚拟机》第三版的第2章-虚拟机栈.5cc9c70c.png"},690:function(s,t,a){s.exports=a.p+"assets/img/JVM堆内存结构-JDK7.7d9166eb.png"},691:function(s,t,a){s.exports=a.p+"assets/img/JVM堆内存结构-jdk8.919b9959.png"},692:function(s,t,a){s.exports=a.p+"assets/img/Java创建对象的过程.dbe33c41.png"},693:function(s,t,a){s.exports=a.p+"assets/img/内存分配的两种方式.9ecae4c9.png"},694:function(s,t,a){s.exports=a.p+"assets/img/对象的访问定位-使用句柄.53859387.png"},695:function(s,t,a){s.exports=a.p+"assets/img/对象的访问定位-直接指针.c3bbe790.png"},849:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"java-内存区域详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-内存区域详解"}},[s._v("#")]),s._v(" Java 内存区域详解")]),s._v(" "),n("p",[s._v("如果没有特殊说明，都是针对的是 HotSpot 虚拟机。")]),s._v(" "),n("h2",{attrs:{id:"写在前面-常见面试题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#写在前面-常见面试题"}},[s._v("#")]),s._v(" 写在前面 (常见面试题)")]),s._v(" "),n("h3",{attrs:{id:"基本问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本问题"}},[s._v("#")]),s._v(" 基本问题")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("介绍下 Java 内存区域（运行时数据区）")])]),s._v(" "),n("li",[n("strong",[s._v("Java 对象的创建过程（五步，建议能默写出来并且要知道每一步虚拟机做了什么）")])]),s._v(" "),n("li",[n("strong",[s._v("对象的访问定位的两种方式（句柄和直接指针两种方式）")])])]),s._v(" "),n("h3",{attrs:{id:"拓展问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#拓展问题"}},[s._v("#")]),s._v(" 拓展问题")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("String 类和常量池")])]),s._v(" "),n("li",[n("strong",[s._v("8 种基本类型的包装类和常量池")])])]),s._v(" "),n("h2",{attrs:{id:"一-概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-概述"}},[s._v("#")]),s._v(" 一 概述")]),s._v(" "),n("p",[s._v("对于 Java 程序员来说，在虚拟机自动内存管理机制下，不再需要像 C/C++程序开发程序员这样为每一个 new 操作去写对应的 delete/free 操作，不容易出现内存泄漏和内存溢出问题。正是因为 Java 程序员把内存控制权利交给 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将会是一个非常艰巨的任务。")]),s._v(" "),n("h2",{attrs:{id:"二-运行时数据区域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-运行时数据区域"}},[s._v("#")]),s._v(" 二 运行时数据区域")]),s._v(" "),n("p",[s._v("Java 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。JDK 1.8 和之前的版本略有不同，下面会介绍到。")]),s._v(" "),n("p",[n("strong",[s._v("JDK 1.8 之前：")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(688),alt:""}})]),s._v(" "),n("p",[n("strong",[s._v("JDK 1.8 ：")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(244),alt:""}})]),s._v(" "),n("p",[n("strong",[s._v("线程私有的：")])]),s._v(" "),n("ul",[n("li",[s._v("程序计数器")]),s._v(" "),n("li",[s._v("虚拟机栈")]),s._v(" "),n("li",[s._v("本地方法栈")])]),s._v(" "),n("p",[n("strong",[s._v("线程共享的：")])]),s._v(" "),n("ul",[n("li",[s._v("堆")]),s._v(" "),n("li",[s._v("方法区")]),s._v(" "),n("li",[s._v("直接内存 (非运行时数据区的一部分)")])]),s._v(" "),n("h3",{attrs:{id:"_2-1-程序计数器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-程序计数器"}},[s._v("#")]),s._v(" 2.1 程序计数器")]),s._v(" "),n("p",[s._v("程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。"),n("strong",[s._v("字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。")])]),s._v(" "),n("p",[s._v("另外，"),n("strong",[s._v("为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。")])]),s._v(" "),n("p",[n("strong",[s._v("从上面的介绍中我们知道程序计数器主要有两个作用：")])]),s._v(" "),n("ol",[n("li",[s._v("字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。")]),s._v(" "),n("li",[s._v("在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。")])]),s._v(" "),n("p",[n("strong",[s._v("注意：程序计数器是唯一一个不会出现 "),n("code",[s._v("OutOfMemoryError")]),s._v(" 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。")])]),s._v(" "),n("h3",{attrs:{id:"_2-2-java-虚拟机栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-java-虚拟机栈"}},[s._v("#")]),s._v(" 2.2 Java 虚拟机栈")]),s._v(" "),n("p",[n("strong",[s._v("与程序计数器一样，Java 虚拟机栈也是线程私有的，它的生命周期和线程相同，描述的是 Java 方法执行的内存模型，每次方法调用的数据都是通过栈传递的。")])]),s._v(" "),n("p",[n("strong",[s._v("Java 内存可以粗糙的区分为堆内存（Heap）和栈内存 (Stack)，其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。")]),s._v(" （实际上，Java 虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。）")]),s._v(" "),n("p",[n("strong",[s._v("局部变量表主要存放了编译期可知的各种数据类型")]),s._v("（boolean、byte、char、short、int、float、long、double）、"),n("strong",[s._v("对象引用")]),s._v("（reference 类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。")]),s._v(" "),n("p",[n("strong",[s._v("Java 虚拟机栈会出现两种错误："),n("code",[s._v("StackOverFlowError")]),s._v(" 和 "),n("code",[s._v("OutOfMemoryError")]),s._v("。")])]),s._v(" "),n("ul",[n("li",[n("strong",[n("code",[s._v("StackOverFlowError")]),s._v("：")]),s._v(" 若 Java 虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 StackOverFlowError 错误。")]),s._v(" "),n("li",[n("strong",[n("code",[s._v("OutOfMemoryError")]),s._v("：")]),s._v(" Java 虚拟机栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出"),n("code",[s._v("OutOfMemoryError")]),s._v("异常。")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(689),alt:""}})]),s._v(" "),n("p",[s._v("Java 虚拟机栈也是线程私有的，每个线程都有各自的 Java 虚拟机栈，而且随着线程的创建而创建，随着线程的死亡而死亡。")]),s._v(" "),n("p",[n("strong",[s._v("扩展：那么方法/函数如何调用？")])]),s._v(" "),n("p",[s._v("Java 栈可以类比数据结构中栈，Java 栈中保存的主要内容是栈帧，每一次函数调用都会有一个对应的栈帧被压入 Java 栈，每一个函数调用结束后，都会有一个栈帧被弹出。")]),s._v(" "),n("p",[s._v("Java 方法有两种返回方式：")]),s._v(" "),n("ol",[n("li",[s._v("return 语句。")]),s._v(" "),n("li",[s._v("抛出异常。")])]),s._v(" "),n("p",[s._v("不管哪种返回方式都会导致栈帧被弹出。")]),s._v(" "),n("h3",{attrs:{id:"_2-3-本地方法栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-本地方法栈"}},[s._v("#")]),s._v(" 2.3 本地方法栈")]),s._v(" "),n("p",[s._v("和虚拟机栈所发挥的作用非常相似，区别是： "),n("strong",[s._v("虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。")]),s._v(" 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。")]),s._v(" "),n("p",[s._v("本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。")]),s._v(" "),n("p",[s._v("方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 "),n("code",[s._v("StackOverFlowError")]),s._v(" 和 "),n("code",[s._v("OutOfMemoryError")]),s._v(" 两种错误。")]),s._v(" "),n("h3",{attrs:{id:"_2-4-堆"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-堆"}},[s._v("#")]),s._v(" 2.4 堆")]),s._v(" "),n("p",[s._v("Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。"),n("strong",[s._v("此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。")])]),s._v(" "),n("p",[s._v("Java 世界中“几乎”所有的对象都在堆中分配，但是，随着 JIT 编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。从 JDK 1.7 开始已经默认开启逃逸分析，如果某些方法中的对象引用没有被返回或者未被外面使用（也就是未逃逸出去），那么对象可以直接在栈上分配内存。")]),s._v(" "),n("p",[s._v("Java 堆是垃圾收集器管理的主要区域，因此也被称作"),n("strong",[s._v("GC 堆（Garbage Collected Heap）")]),s._v("。从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代；再细致一点有：Eden 空间、From Survivor、To Survivor 空间等。"),n("strong",[s._v("进一步划分的目的是更好地回收内存，或者更快地分配内存。")])]),s._v(" "),n("p",[s._v("在 JDK 7 版本及 JDK 7 版本之前，堆内存被通常分为下面三部分：")]),s._v(" "),n("ol",[n("li",[s._v("新生代内存(Young Generation)")]),s._v(" "),n("li",[s._v("老生代(Old Generation)")]),s._v(" "),n("li",[s._v("永生代(Permanent Generation)")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(690),alt:"JVM堆内存结构-JDK7"}})]),s._v(" "),n("p",[s._v("JDK 8 版本之后方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是直接内存。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(691),alt:"JVM堆内存结构-JDK8"}})]),s._v(" "),n("p",[n("strong",[s._v("上图所示的 Eden 区、两个 Survivor 区都属于新生代（为了区分，这两个 Survivor 区域按照顺序被命名为 from 和 to），中间一层属于老年代。")])]),s._v(" "),n("p",[s._v("大部分情况，对象都会首先在 Eden 区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入 s0 或者 s1，并且对象的年龄还会加 1(Eden 区->Survivor 区后对象的初始年龄变为 1)，当它的年龄增加到一定程度（默认为 15 岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 "),n("code",[s._v("-XX:MaxTenuringThreshold")]),s._v(" 来设置。")]),s._v(" "),n("blockquote",[n("p",[n("strong",[s._v("🐛 修正（参见："),n("a",{attrs:{href:"https://github.com/Snailclimb/JavaGuide/issues/552",target:"_blank",rel:"noopener noreferrer"}},[s._v("issue552"),n("OutboundLink")],1),s._v("）")]),s._v(" ：“Hotspot 遍历所有对象时，按照年龄从小到大对其所占用的大小进行累积，当累积的某个年龄大小超过了 survivor 区的一半时，取这个年龄和 MaxTenuringThreshold 中更小的一个值，作为新的晋升年龄阈值”。")]),s._v(" "),n("p",[n("strong",[s._v("动态年龄计算的代码如下")])]),s._v(" "),n("div",{staticClass:"language-c++ line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("uint ageTable::compute_tenuring_threshold(size_t survivor_capacity) {\n\t//survivor_capacity是survivor空间的大小\nsize_t desired_survivor_size = (size_t)((((double) survivor_capacity)*TargetSurvivorRatio)/100);\nsize_t total = 0;\nuint age = 1;\nwhile (age < table_size) {\ntotal += sizes[age];//sizes数组是每个年龄段对象大小\nif (total > desired_survivor_size) break;\nage++;\n}\nuint result = age < MaxTenuringThreshold ? age : MaxTenuringThreshold;\n\t...\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])])]),s._v(" "),n("p",[s._v("堆这里最容易出现的就是 OutOfMemoryError 错误，并且出现这种错误之后的表现形式还会有几种，比如：")]),s._v(" "),n("ol",[n("li",[n("strong",[n("code",[s._v("java.lang.OutOfMemoryError: GC Overhead Limit Exceeded")])]),s._v(" ： 当 JVM 花太多时间执行垃圾回收并且只能回收很少的堆空间时，就会发生此错误。")]),s._v(" "),n("li",[n("strong",[n("code",[s._v("java.lang.OutOfMemoryError: Java heap space")])]),s._v(" :假如在创建新的对象时, 堆内存中的空间不足以存放新创建的对象, 就会引发此错误。(和配置的最大堆内存有关，且受制于物理内存大小。最大堆内存可通过"),n("code",[s._v("-Xmx")]),s._v("参数配置，若没有特别配置，将会使用默认值，详见："),n("a",{attrs:{href:"https://stackoverflow.com/questions/28272923/default-xmxsize-in-java-8-max-heap-size",target:"_blank",rel:"noopener noreferrer"}},[s._v("Default Java 8 max heap size"),n("OutboundLink")],1),s._v(")")]),s._v(" "),n("li",[s._v("......")])]),s._v(" "),n("h3",{attrs:{id:"_2-5-方法区"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-方法区"}},[s._v("#")]),s._v(" 2.5 方法区")]),s._v(" "),n("p",[s._v("方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然 "),n("strong",[s._v("Java 虚拟机规范把方法区描述为堆的一个逻辑部分")]),s._v("，但是它却有一个别名叫做 "),n("strong",[s._v("Non-Heap（非堆）")]),s._v("，目的应该是与 Java 堆区分开来。")]),s._v(" "),n("p",[s._v("方法区也被称为永久代。很多人都会分不清方法区和永久代的关系，为此我也查阅了文献。")]),s._v(" "),n("h4",{attrs:{id:"_2-5-1-方法区和永久代的关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-方法区和永久代的关系"}},[s._v("#")]),s._v(" 2.5.1 方法区和永久代的关系")]),s._v(" "),n("blockquote",[n("p",[s._v("《Java 虚拟机规范》只是规定了有方法区这么个概念和它的作用，并没有规定如何去实现它。那么，在不同的 JVM 上方法区的实现肯定是不同的了。 "),n("strong",[s._v("方法区和永久代的关系很像 Java 中接口和类的关系，类实现了接口，而永久代就是 HotSpot 虚拟机对虚拟机规范中方法区的一种实现方式。")]),s._v(" 也就是说，永久代是 HotSpot 的概念，方法区是 Java 虚拟机规范中的定义，是一种规范，而永久代是一种实现，一个是标准一个是实现，其他的虚拟机实现并没有永久代这一说法。")])]),s._v(" "),n("h4",{attrs:{id:"_2-5-2-常用参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2-常用参数"}},[s._v("#")]),s._v(" 2.5.2 常用参数")]),s._v(" "),n("p",[s._v("JDK 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("XX"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PermSize")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//方法区 (永久代) 初始大小")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("XX"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MaxPermSize")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。")]),s._v(" "),n("p",[s._v("JDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是直接内存。")]),s._v(" "),n("p",[s._v("下面是一些常用参数：")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("XX"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MetaspaceSize")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//设置 Metaspace 的初始（和最小大小）")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("XX"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MaxMetaspaceSize")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//设置 Metaspace 的最大大小")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("与永久代很大的不同就是，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。")]),s._v(" "),n("h4",{attrs:{id:"_2-5-3-为什么要将永久代-permgen-替换为元空间-metaspace-呢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-3-为什么要将永久代-permgen-替换为元空间-metaspace-呢"}},[s._v("#")]),s._v(" 2.5.3 为什么要将永久代 (PermGen) 替换为元空间 (MetaSpace) 呢?")]),s._v(" "),n("p",[s._v("下图来自《深入理解 Java 虚拟机》第 3 版 2.2.5")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210425134508117.png",alt:""}})]),s._v(" "),n("ol",[n("li",[n("p",[s._v("整个永久代有一个 JVM 本身设置的固定大小上限，无法进行调整，而元空间使用的是直接内存，受本机可用内存的限制，虽然元空间仍旧可能溢出，但是比原来出现的几率会更小。")]),s._v(" "),n("blockquote",[n("p",[s._v("当元空间溢出时会得到如下错误： "),n("code",[s._v("java.lang.OutOfMemoryError: MetaSpace")])])])])]),s._v(" "),n("p",[s._v("你可以使用 "),n("code",[s._v("-XX：MaxMetaspaceSize")]),s._v(" 标志设置最大元空间大小，默认值为 unlimited，这意味着它只受系统内存的限制。"),n("code",[s._v("-XX：MetaspaceSize")]),s._v(" 调整标志定义元空间的初始大小如果未指定此标志，则 Metaspace 将根据运行时的应用程序需求动态地重新调整大小。")]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[n("p",[s._v("元空间里面存放的是类的元数据，这样加载多少类的元数据就不由 "),n("code",[s._v("MaxPermSize")]),s._v(" 控制了, 而由系统的实际可用空间来控制，这样能加载的类就更多了。")])]),s._v(" "),n("li",[n("p",[s._v("在 JDK8，合并 HotSpot 和 JRockit 的代码时, JRockit 从来没有一个叫永久代的东西, 合并之后就没有必要额外的设置这么一个永久代的地方了。")])])]),s._v(" "),n("h3",{attrs:{id:"_2-6-运行时常量池"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-运行时常量池"}},[s._v("#")]),s._v(" 2.6 运行时常量池")]),s._v(" "),n("p",[s._v("运行时常量池是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池表（用于存放编译期生成的各种字面量和符号引用）")]),s._v(" "),n("p",[s._v("既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 错误。")]),s._v(" "),n("p",[n("s",[n("strong",[s._v("JDK1.7 及之后版本的 JVM 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。")])])]),s._v(" "),n("blockquote",[n("p",[n("strong",[s._v("🐛 修正（参见："),n("a",{attrs:{href:"https://github.com/Snailclimb/JavaGuide/issues/747",target:"_blank",rel:"noopener noreferrer"}},[s._v("issue747"),n("OutboundLink")],1),s._v("，"),n("a",{attrs:{href:"https://blog.csdn.net/q5706503/article/details/84640762",target:"_blank",rel:"noopener noreferrer"}},[s._v("reference"),n("OutboundLink")],1),s._v("）")]),s._v(" ：")]),s._v(" "),n("ol",[n("li",[n("strong",[s._v("JDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区, 此时 hotspot 虚拟机对方法区的实现为永久代")])]),s._v(" "),n("li",[n("strong",[s._v("JDK1.7 字符串常量池被从方法区拿到了堆中, 这里没有提到运行时常量池,也就是说字符串常量池被单独拿到堆,运行时常量池剩下的东西还在方法区, 也就是 hotspot 中的永久代")]),s._v(" 。")]),s._v(" "),n("li",[n("strong",[s._v("JDK1.8 hotspot 移除了永久代用元空间(Metaspace)取而代之, 这时候字符串常量池还在堆, 运行时常量池还在方法区, 只不过方法区的实现从永久代变成了元空间(Metaspace)")])])])]),s._v(" "),n("p",[s._v("相关问题：JVM 常量池中存储的是对象还是引用呢？： https://www.zhihu.com/question/57109429/answer/151717241 by RednaxelaFX")]),s._v(" "),n("h3",{attrs:{id:"_2-7-直接内存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-直接内存"}},[s._v("#")]),s._v(" 2.7 直接内存")]),s._v(" "),n("p",[n("strong",[s._v("直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 错误出现。")])]),s._v(" "),n("p",[s._v("JDK1.4 中新加入的 "),n("strong",[s._v("NIO(New Input/Output) 类")]),s._v("，引入了一种基于"),n("strong",[s._v("通道（Channel）"),n("strong",[s._v("与")]),s._v("缓存区（Buffer）"),n("strong",[s._v("的 I/O 方式，它可以直接使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为")]),s._v("避免了在 Java 堆和 Native 堆之间来回复制数据")]),s._v("。")]),s._v(" "),n("p",[s._v("本机直接内存的分配不会受到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。")]),s._v(" "),n("h2",{attrs:{id:"三-hotspot-虚拟机对象探秘"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-hotspot-虚拟机对象探秘"}},[s._v("#")]),s._v(" 三 HotSpot 虚拟机对象探秘")]),s._v(" "),n("p",[s._v("通过上面的介绍我们大概知道了虚拟机的内存情况，下面我们来详细的了解一下 HotSpot 虚拟机在 Java 堆中对象分配、布局和访问的全过程。")]),s._v(" "),n("h3",{attrs:{id:"_3-1-对象的创建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-对象的创建"}},[s._v("#")]),s._v(" 3.1 对象的创建")]),s._v(" "),n("p",[s._v("下图便是 Java 对象的创建过程，我建议最好是能默写出来，并且要掌握每一步在做什么。\n"),n("img",{attrs:{src:a(692),alt:"Java创建对象的过程"}})]),s._v(" "),n("h4",{attrs:{id:"step1-类加载检查"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step1-类加载检查"}},[s._v("#")]),s._v(" Step1:类加载检查")]),s._v(" "),n("p",[s._v("虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。")]),s._v(" "),n("h4",{attrs:{id:"step2-分配内存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step2-分配内存"}},[s._v("#")]),s._v(" Step2:分配内存")]),s._v(" "),n("p",[s._v("在"),n("strong",[s._v("类加载检查")]),s._v("通过后，接下来虚拟机将为新生对象"),n("strong",[s._v("分配内存")]),s._v("。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。"),n("strong",[s._v("分配方式")]),s._v("有 "),n("strong",[s._v("“指针碰撞”")]),s._v(" 和 "),n("strong",[s._v("“空闲列表”")]),s._v(" 两种，"),n("strong",[s._v("选择哪种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定")]),s._v("。")]),s._v(" "),n("p",[n("strong",[s._v("内存分配的两种方式：（补充内容，需要掌握）")])]),s._v(" "),n("p",[s._v('选择以上两种方式中的哪一种，取决于 Java 堆内存是否规整。而 Java 堆内存是否规整，取决于 GC 收集器的算法是"标记-清除"，还是"标记-整理"（也称作"标记-压缩"），值得注意的是，复制算法内存也是规整的')]),s._v(" "),n("p",[n("img",{attrs:{src:a(693),alt:"内存分配的两种方式"}})]),s._v(" "),n("p",[n("strong",[s._v("内存分配并发问题（补充内容，需要掌握）")])]),s._v(" "),n("p",[s._v("在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("CAS+失败重试：")]),s._v(" CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。"),n("strong",[s._v("虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。")])]),s._v(" "),n("li",[n("strong",[s._v("TLAB：")]),s._v(" 为每一个线程预先在 Eden 区分配一块儿内存，JVM 在给线程中的对象分配内存时，首先在 TLAB 分配，当对象大于 TLAB 中的剩余内存或 TLAB 的内存已用尽时，再采用上述的 CAS 进行内存分配")])]),s._v(" "),n("h4",{attrs:{id:"step3-初始化零值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step3-初始化零值"}},[s._v("#")]),s._v(" Step3:初始化零值")]),s._v(" "),n("p",[s._v("内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。")]),s._v(" "),n("h4",{attrs:{id:"step4-设置对象头"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step4-设置对象头"}},[s._v("#")]),s._v(" Step4:设置对象头")]),s._v(" "),n("p",[s._v("初始化零值完成之后，"),n("strong",[s._v("虚拟机要对对象进行必要的设置")]),s._v("，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 "),n("strong",[s._v("这些信息存放在对象头中。")]),s._v(" 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。")]),s._v(" "),n("h4",{attrs:{id:"step5-执行-init-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step5-执行-init-方法"}},[s._v("#")]),s._v(" Step5:执行 init 方法")]),s._v(" "),n("p",[s._v("在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，"),n("code",[s._v("<init>")]),s._v(" 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 "),n("code",[s._v("<init>")]),s._v(" 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。")]),s._v(" "),n("h3",{attrs:{id:"_3-2-对象的内存布局"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-对象的内存布局"}},[s._v("#")]),s._v(" 3.2 对象的内存布局")]),s._v(" "),n("p",[s._v("在 Hotspot 虚拟机中，对象在内存中的布局可以分为 3 块区域："),n("strong",[s._v("对象头")]),s._v("、"),n("strong",[s._v("实例数据")]),s._v("和"),n("strong",[s._v("对齐填充")]),s._v("。")]),s._v(" "),n("p",[n("strong",[s._v("Hotspot 虚拟机的对象头包括两部分信息")]),s._v("，"),n("strong",[s._v("第一部分用于存储对象自身的运行时数据")]),s._v("（哈希码、GC 分代年龄、锁状态标志等等），"),n("strong",[s._v("另一部分是类型指针")]),s._v("，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是那个类的实例。")]),s._v(" "),n("p",[n("strong",[s._v("实例数据部分是对象真正存储的有效信息")]),s._v("，也是在程序中所定义的各种类型的字段内容。")]),s._v(" "),n("p",[n("strong",[s._v("对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。")]),s._v(" 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。")]),s._v(" "),n("h3",{attrs:{id:"_3-3-对象的访问定位"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-对象的访问定位"}},[s._v("#")]),s._v(" 3.3 对象的访问定位")]),s._v(" "),n("p",[s._v("建立对象就是为了使用对象，我们的 Java 程序通过栈上的 reference 数据来操作堆上的具体对象。对象的访问方式由虚拟机实现而定，目前主流的访问方式有"),n("strong",[s._v("① 使用句柄")]),s._v("和"),n("strong",[s._v("② 直接指针")]),s._v("两种：")]),s._v(" "),n("ol",[n("li",[n("p",[n("strong",[s._v("句柄：")]),s._v(" 如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息；")]),s._v(" "),n("p",[n("img",{attrs:{src:a(694),alt:"对象的访问定位-使用句柄"}})])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("直接指针：")]),s._v(" 如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而 reference 中存储的直接就是对象的地址。")])])]),s._v(" "),n("p",[n("img",{attrs:{src:a(695),alt:"对象的访问定位-直接指针"}})]),s._v(" "),n("p",[n("strong",[s._v("这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。")])]),s._v(" "),n("h2",{attrs:{id:"四-重点补充内容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-重点补充内容"}},[s._v("#")]),s._v(" 四 重点补充内容")]),s._v(" "),n("h3",{attrs:{id:"_4-1-字符串常量池常见问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-字符串常量池常见问题"}},[s._v("#")]),s._v(" 4.1 字符串常量池常见问题")]),s._v(" "),n("p",[s._v("我们先来看一个非常常见的面试题："),n("strong",[s._v("String 类型的变量和常量做“+”运算时发生了什么？")]),s._v(" 。")]),s._v(" "),n("p",[s._v("先来看字符串不加 "),n("code",[s._v("final")]),s._v(" 关键字拼接的情况（JDK1.8）：")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ing"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ing"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//常量池中的对象")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" str2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//在堆上创建的新的对象")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str5 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//常量池中的对象")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" str4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//false")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" str5"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" str5"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//false")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("blockquote",[n("p",[n("strong",[s._v("注意")]),s._v(" ：比较 String 字符串的值是否相等，可以使用 "),n("code",[s._v("equals()")]),s._v(" 方法。 "),n("code",[s._v("String")]),s._v(" 中的 "),n("code",[s._v("equals")]),s._v(" 方法是被重写过的。 "),n("code",[s._v("Object")]),s._v(" 的 "),n("code",[s._v("equals")]),s._v(" 方法是比较的对象的内存地址，而 "),n("code",[s._v("String")]),s._v(" 的 "),n("code",[s._v("equals")]),s._v(" 方法比较的是字符串的值是否相等。如果你使用 "),n("code",[s._v("==")]),s._v(" 比较两个字符串是否相等的话，IDEA 还是提示你使用 "),n("code",[s._v("equals()")]),s._v(" 方法替换。")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/image-20210817123252441.png",alt:""}})]),s._v(" "),n("blockquote",[n("p",[s._v("对于基本数据类型来说，== 比较的是值。对于引用数据类型来说，==比较的是对象的内存地址。")])]),s._v(" "),n("p",[s._v("对于编译期可以确定值的字符串，也就是常量字符串 ，jvm 会将其存入字符串常量池。")]),s._v(" "),n("blockquote",[n("p",[n("strong",[s._v("字符串常量池")]),s._v(" 是 JVM 为了提升性能和减少内存消耗针为字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" aa "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 放在常量池中")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" bb "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从常量池中查找")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("aa"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("bb"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("JDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区。JDK1.7 的时候，字符串常量池被从方法区拿到了堆中。")])]),s._v(" "),n("p",[s._v("并且，字符串常量拼接得到的字符串常量在编译阶段就已经被存放字符串常量池，这个得益于编译器的优化。")]),s._v(" "),n("blockquote",[n("p",[s._v("在编译过程中，Javac 编译器（下文中统称为编译器）会进行一个叫做 "),n("strong",[s._v("常量折叠(Constant Folding)")]),s._v(" 的代码优化。《深入理解 Java 虚拟机》中是也有介绍到：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/javaguide/image-20210817142715396.png",alt:""}})]),s._v(" "),n("p",[s._v("常量折叠会把常量表达式的值求出来作为常量嵌在最终生成的代码中，这是 Javac 编译器会对源代码做的极少量优化措施之一(代码优化几乎都在即时编译器中进行)。")]),s._v(" "),n("p",[s._v("对于 "),n("code",[s._v('String str3 = "str" + "ing";')]),s._v(" 编译器会给你优化成 "),n("code",[s._v('String str3 = "string";')]),s._v(" 。")]),s._v(" "),n("p",[s._v("并不是所有的常量都会进行折叠，只有编译器在程序编译期就可以确定值的常量才可以：")]),s._v(" "),n("ol",[n("li",[s._v("基本数据类型(byte、boolean、short、char、int、float、long、double)以及字符串常量")]),s._v(" "),n("li",[n("code",[s._v("final")]),s._v(" 修饰的基本数据类型和字符串变量")]),s._v(" "),n("li",[s._v("字符串通过 “+”拼接得到的字符串、基本数据类型之间算数运算（加减乘除）、基本数据类型的位运算（<<、>>、>>> ）")])])]),s._v(" "),n("p",[s._v("因此，"),n("code",[s._v("str1")]),s._v(" 、 "),n("code",[s._v("str2")]),s._v(" 、 "),n("code",[s._v("str3")]),s._v(" 都属于字符串常量池中的对象。")]),s._v(" "),n("p",[s._v("引用的值在程序编译期是无法确定的，编译器无法对其进行优化。")]),s._v(" "),n("p",[s._v("对象引用和“+”的字符串拼接方式，实际上是通过 "),n("code",[s._v("StringBuilder")]),s._v(" 调用 "),n("code",[s._v("append()")]),s._v(" 方法实现的，拼接完成之后调用 "),n("code",[s._v("toString()")]),s._v(" 得到一个 "),n("code",[s._v("String")]),s._v(" 对象 。")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuilder")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("因此，"),n("code",[s._v("str4")]),s._v(" 并不是字符串常量池中存在的对象，属于堆上的新对象。")]),s._v(" "),n("p",[s._v("我画了一个图帮助理解：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/字符串拼接-常量池.png",alt:""}})]),s._v(" "),n("p",[s._v("我们在平时写代码的时候，尽量避免多个字符串对象拼接，因为这样会重新创建对象。如果需要改变字符串的话，可以使用 "),n("code",[s._v("StringBuilder")]),s._v(" 或者 "),n("code",[s._v("StringBuffer")]),s._v("。")]),s._v(" "),n("p",[s._v("不过，字符串使用 "),n("code",[s._v("final")]),s._v(" 关键字声明之后，可以让编译器当做常量来处理。")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ing"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 下面两个表达式其实是等价的")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" c "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ing"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 常量池中的对象")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" d "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" str2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 常量池中的对象")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("被 "),n("code",[s._v("final")]),s._v(" 关键字修改之后的 "),n("code",[s._v("String")]),s._v(" 会被编译器当做常量来处理，编译器在程序编译期就可以确定它的值，其效果就想到于访问常量。")]),s._v(" "),n("p",[s._v("如果 ，编译器在运行时才能知道其确切值的话，就无法对其优化。")]),s._v(" "),n("p",[s._v("示例代码如下（"),n("code",[s._v("str2")]),s._v(" 在运行时才能确定其值）：")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getStr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" c "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ing"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 常量池中的对象")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" d "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" str2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在堆上创建的新的对象")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getStr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ing"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[n("strong",[s._v("我们再来看一个类似的问题！")])]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abcd"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abcd"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abcd"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str1"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("str2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str2"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("str3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("上面的代码运行之后会输出什么呢？")]),s._v(" "),n("p",[s._v("答案是：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("false\nfalse\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("这是为什么呢？")])]),s._v(" "),n("p",[s._v("我们先来看下面这种创建字符串对象的方式：")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从字符串常量池中拿对象")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abcd"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v('这种情况下，jvm 会先检查字符串常量池中有没有"abcd"，如果字符串常量池中没有，则创建一个，然后 str1 指向字符串常量池中的对象，如果有，则直接将 str1 指向"abcd""；')]),s._v(" "),n("p",[s._v("因此，"),n("code",[s._v("str1")]),s._v(" 指向的是字符串常量池的对象。")]),s._v(" "),n("p",[s._v("我们再来看下面这种创建字符串对象的方式：")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 直接在堆内存空间创建一个新的对象。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abcd"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abcd"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("只要使用 new 的方式创建对象，便需要创建新的对象")]),s._v(" 。")]),s._v(" "),n("p",[s._v("使用 new 的方式创建对象的方式如下，可以简单概括为 3 步：")]),s._v(" "),n("ol",[n("li",[s._v("在堆中创建一个字符串对象")]),s._v(" "),n("li",[s._v("检查字符串常量池中是否有和 new 的字符串值相等的字符串常量")]),s._v(" "),n("li",[s._v("如果没有的话需要在字符串常量池中也创建一个值相等的字符串常量，如果有的话，就直接返回堆中的字符串实例对象地址。")])]),s._v(" "),n("p",[s._v("因此，"),n("code",[s._v("str2")]),s._v(" 和 "),n("code",[s._v("str3")]),s._v(" 都是在堆中新创建的对象。")]),s._v(" "),n("p",[n("strong",[s._v("字符串常量池比较特殊，它的主要使用方法有两种：")])]),s._v(" "),n("ol",[n("li",[s._v("直接使用双引号声明出来的 "),n("code",[s._v("String")]),s._v(" 对象会直接存储在常量池中。")]),s._v(" "),n("li",[s._v("如果不是用双引号声明的 "),n("code",[s._v("String")]),s._v(" 对象，使用 "),n("code",[s._v("String")]),s._v(" 提供的 "),n("code",[s._v("intern()")]),s._v(" 方法也有同样的效果。"),n("code",[s._v("String.intern()")]),s._v(" 是一个 Native 方法，它的作用是：如果运行时常量池中已经包含一个等于此 String 对象内容的字符串，则返回常量池中该字符串的引用；如果没有，JDK1.7 之前（不包含 1.7）的处理方式是在常量池中创建与此 "),n("code",[s._v("String")]),s._v(" 内容相同的字符串，并返回常量池中创建的字符串的引用，JDK1.7 以及之后，字符串常量池被从方法区拿到了堆中，jvm 不会在常量池中创建该对象，而是将堆中这个对象的引用直接放到常量池中，减少不必要的内存开销。")])]),s._v(" "),n("p",[s._v("示例代码如下（JDK 1.8） :")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Javatpoint"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("intern")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Javatpoint"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("intern")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("s2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// True")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("s3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// False")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("s4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// True")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s2"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("s3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// False")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s2"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("s4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// True")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s3"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("s4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// False")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("strong",[s._v("总结")]),s._v(" ：")]),s._v(" "),n("ol",[n("li",[s._v("对于基本数据类型来说，==比较的是值。对于引用数据类型来说，==比较的是对象的内存地址。")]),s._v(" "),n("li",[s._v("在编译过程中，Javac 编译器（下文中统称为编译器）会进行一个叫做 "),n("strong",[s._v("常量折叠(Constant Folding)")]),s._v(" 的代码优化。常量折叠会把常量表达式的值求出来作为常量嵌在最终生成的代码中，这是 Javac 编译器会对源代码做的极少量优化措施之一(代码优化几乎都在即时编译器中进行)。")]),s._v(" "),n("li",[s._v("一般来说，我们要尽量避免通过 new 的方式创建字符串。使用双引号声明的 "),n("code",[s._v("String")]),s._v(" 对象（ "),n("code",[s._v('String s1 = "java"')]),s._v(" ）更利于让编译器有机会优化我们的代码，同时也更易于阅读。")]),s._v(" "),n("li",[s._v("被 "),n("code",[s._v("final")]),s._v(" 关键字修改之后的 "),n("code",[s._v("String")]),s._v(" 会被编译器当做常量来处理，编译器程序编译期就可以确定它的值，其效果就想到于访问常量。")])]),s._v(" "),n("h3",{attrs:{id:"_4-2-string-s1-new-string-abc-这句话创建了几个字符串对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-string-s1-new-string-abc-这句话创建了几个字符串对象"}},[s._v("#")]),s._v(' 4.2 String s1 = new String("abc");这句话创建了几个字符串对象？')]),s._v(" "),n("p",[s._v("会创建 1 或 2 个字符串：")]),s._v(" "),n("ul",[n("li",[s._v("如果字符串常量池中已存在字符串常量“abc”，则只会在堆空间创建一个字符串常量“abc”。")]),s._v(" "),n("li",[s._v("如果字符串常量池中没有字符串常量“abc”，那么它将首先在字符串常量池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。")])]),s._v(" "),n("p",[n("strong",[s._v("验证：")])]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 堆内存的地址值")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" s2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 true")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("结果：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("false\ntrue\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"_4-3-8-种基本类型的包装类和常量池"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-8-种基本类型的包装类和常量池"}},[s._v("#")]),s._v(" 4.3 8 种基本类型的包装类和常量池")]),s._v(" "),n("p",[s._v("Java 基本类型的包装类的大部分都实现了常量池技术。")]),s._v(" "),n("p",[n("code",[s._v("Byte")]),s._v(","),n("code",[s._v("Short")]),s._v(","),n("code",[s._v("Integer")]),s._v(","),n("code",[s._v("Long")]),s._v(" 这 4 种包装类默认创建了数值 "),n("strong",[s._v("[-128，127]")]),s._v(" 的相应类型的缓存数据，"),n("code",[s._v("Character")]),s._v(" 创建了数值在 "),n("strong",[s._v("[0,127]")]),s._v(" 范围的缓存数据，"),n("code",[s._v("Boolean")]),s._v(" 直接返回 "),n("code",[s._v("True")]),s._v(" Or "),n("code",[s._v("False")]),s._v("。")]),s._v(" "),n("p",[s._v("两种浮点数类型的包装类 "),n("code",[s._v("Float")]),s._v(","),n("code",[s._v("Double")]),s._v(" 并没有实现常量池技术。")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" i1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" i2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("33")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" i2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 true")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" i11 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("333")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" i22 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("333")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i11 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" i22"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 false")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Double")]),s._v(" i3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Double")]),s._v(" i4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" i4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 false")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[n("strong",[s._v("Integer 缓存源代码：")])]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n*此方法将始终缓存-128 到 127（包括端点）范围内的值，并可以缓存此范围之外的其他值。\n*/")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IntegerCache")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("low "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IntegerCache")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("high"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IntegerCache")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("cache"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IntegerCache")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("low"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IntegerCache")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" low "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" high"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" cache"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[n("strong",[n("code",[s._v("Character")]),s._v(" 缓存源码:")])]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// must cache")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CharacterCache")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("cache"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CharacterCache")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CharacterCache")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),s._v(" cache"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" cache"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            cache"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Character")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[n("strong",[n("code",[s._v("Boolean")]),s._v(" 缓存源码：")])]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Boolean")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" TRUE "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" FALSE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("如果超出对应范围仍然会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。")]),s._v(" "),n("p",[s._v("下面我们来看一下问题。下面的代码的输出结果是 "),n("code",[s._v("true")]),s._v(" 还是 "),n("code",[s._v("flase")]),s._v(" 呢？")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" i1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" i2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i1"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("i2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("code",[s._v("Integer i1=40")]),s._v(" 这一行代码会发生装箱，也就是说这行代码等价于 "),n("code",[s._v("Integer i1=Integer.valueOf(40)")]),s._v(" 。因此，"),n("code",[s._v("i1")]),s._v(" 直接使用的是常量池中的对象。而"),n("code",[s._v("Integer i1 = new Integer(40)")]),s._v(" 会直接创建新的对象。")]),s._v(" "),n("p",[s._v("因此，答案是 "),n("code",[s._v("false")]),s._v(" 。你答对了吗？")]),s._v(" "),n("p",[s._v("记住："),n("strong",[s._v("所有整型包装类对象之间值的比较，全部使用 equals 方法比较")]),s._v("。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/javaguide/20210313164740893.png",alt:""}})]),s._v(" "),n("p",[n("strong",[s._v("Integer 比较更丰富的一个例子:")])]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" i1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" i2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" i3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" i4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" i5 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" i6 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" i2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" i2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" i3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" i4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" i5"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i4 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" i5 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" i6"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" i5 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" i6"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[n("code",[s._v("i1")]),s._v(" , "),n("code",[s._v("i2")]),s._v(" , "),n("code",[s._v("i3")]),s._v(" 都是常量池中的对象，"),n("code",[s._v("i4")]),s._v(" , "),n("code",[s._v("i5")]),s._v(" , "),n("code",[s._v("i6")]),s._v(" 是堆中的对象。")]),s._v(" "),n("p",[n("code",[s._v("i4 == i5 + i6")]),s._v(" 为什么是 true 呢？因为， "),n("code",[s._v("i5")]),s._v(" 和 "),n("code",[s._v("i6")]),s._v(" 会进行自动拆箱操作，进行数值相加，即 "),n("code",[s._v("i4 == 40")]),s._v(" 。 "),n("code",[s._v("Integer")]),s._v(" 对象无法与数值进行直接比较，所以 "),n("code",[s._v("i4")]),s._v(" 自动拆箱转为 int 值 40，最终这条语句转为 "),n("code",[s._v("40 == 40")]),s._v(" 进行数值比较。")]),s._v(" "),n("h2",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),n("ul",[n("li",[s._v("《深入理解 Java 虚拟机：JVM 高级特性与最佳实践（第二版》")]),s._v(" "),n("li",[s._v("《实战 java 虚拟机》")]),s._v(" "),n("li",[n("a",{attrs:{href:"https://docs.oracle.com/javase/specs/index.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://docs.oracle.com/javase/specs/index.html"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"http://www.pointsoftware.ch/en/under-the-hood-runtime-data-areas-javas-memory-model/",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://www.pointsoftware.ch/en/under-the-hood-runtime-data-areas-javas-memory-model/"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://dzone.com/articles/jvm-permgen-%E2%80%93-where-art-thou",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://dzone.com/articles/jvm-permgen-–-where-art-thou"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://stackoverflow.com/questions/9095748/method-area-and-permgen",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://stackoverflow.com/questions/9095748/method-area-and-permgen"),n("OutboundLink")],1)]),s._v(" "),n("li",[s._v("深入解析 String#intern"),n("a",{attrs:{href:"https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html"),n("OutboundLink")],1)]),s._v(" "),n("li",[s._v("R 大（RednaxelaFX）关于常量折叠的回答：https://www.zhihu.com/question/55976094/answer/147302764")])])])}),[],!1,null,null,null);t.default=e.exports}}]);