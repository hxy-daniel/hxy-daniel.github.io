(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{712:function(s,t,e){s.exports=e.p+"assets/img/session-cookie.2c07c1d4.png"},713:function(s,t,e){s.exports=e.p+"assets/img/jwt.2f998fc8.png"},714:function(s,t,e){s.exports=e.p+"assets/img/sso.b3663a62.png"},715:function(s,t,e){s.exports=e.p+"assets/img/微信支付-fnglfdlgdfj.4d94107e.png"},867:function(s,t,e){"use strict";e.r(t);var n=e(1),a=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"认证授权基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#认证授权基础"}},[s._v("#")]),s._v(" 认证授权基础")]),s._v(" "),n("h2",{attrs:{id:"认证-authentication-和授权-authorization-的区别是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#认证-authentication-和授权-authorization-的区别是什么"}},[s._v("#")]),s._v(" 认证 (Authentication) 和授权 (Authorization)的区别是什么？")]),s._v(" "),n("p",[s._v("这是一个绝大多数人都会混淆的问题。首先先从读音上来认识这两个名词，很多人都会把它俩的读音搞混，所以我建议你先先去查一查这两个单词到底该怎么读，他们的具体含义是什么。")]),s._v(" "),n("p",[s._v("说简单点就是：")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("认证 (Authentication)：")]),s._v(" 你是谁。")]),s._v(" "),n("li",[n("strong",[s._v("授权 (Authorization)：")]),s._v(" 你有权限干什么。")])]),s._v(" "),n("p",[s._v("稍微正式点（啰嗦点）的说法就是 ：")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("Authentication（认证）")]),s._v(" 是验证您的身份的凭据（例如用户名/用户 ID 和密码），通过这个凭据，系统得以知道你就是你，也就是说系统存在你这个用户。所以，Authentication 被称为身份/用户验证。")]),s._v(" "),n("li",[n("strong",[s._v("Authorization（授权）")]),s._v(" 发生在 "),n("strong",[s._v("Authentication（认证）")]),s._v(" 之后。授权嘛，光看意思大家应该就明白，它主要掌管我们访问系统的权限。比如有些特定资源只能具有特定权限的人才能访问比如 admin，有些对系统资源操作比如删除、添加、更新只能特定人才具有。")])]),s._v(" "),n("p",[s._v("认证 ：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210604160908352.png",alt:""}})]),s._v(" "),n("p",[s._v("授权：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210604161032412.png",alt:""}})]),s._v(" "),n("p",[s._v("这两个一般在我们的系统中被结合在一起使用，目的就是为了保护我们系统的安全性。")]),s._v(" "),n("h2",{attrs:{id:"rbac-模型了解吗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rbac-模型了解吗"}},[s._v("#")]),s._v(" RBAC 模型了解吗？")]),s._v(" "),n("p",[s._v("系统权限控制最常采用的访问控制模型就是 "),n("strong",[s._v("RBAC 模型")]),s._v(" 。")]),s._v(" "),n("p",[n("strong",[s._v("什么是 RBAC 呢？")])]),s._v(" "),n("p",[s._v("RBAC 即基于角色的权限访问控制（Role-Based Access Control）。这是一种通过角色关联权限，角色同时又关联用户的授权的方式。")]),s._v(" "),n("p",[s._v("简单地说：一个用户可以拥有若干角色，每一个角色又可以被分配若干权限，这样就构造成“用户-角色-权限” 的授权模型。在这种模型中，用户与角色、角色与权限之间构成了多对多的关系，如下图")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images-3@main/11-9/RBAC.png",alt:"RBAC"}})]),s._v(" "),n("p",[n("strong",[s._v("在 RBAC 中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。")])]),s._v(" "),n("p",[s._v("本系统的权限设计相关的表如下（一共 5 张表，2 张用户建立表之间的联系）：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/数据库设计-权限.png",alt:""}})]),s._v(" "),n("p",[s._v("通过这个权限模型，我们可以创建不同的角色并为不同的角色分配不同的权限范围（菜单）。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/javaguide-tech/blog-images-3@main/11-7/权限管理模块.png",alt:""}})]),s._v(" "),n("p",[s._v("通常来说，如果系统对于权限控制要求比较严格的话，一般都会选择使用 RBAC 模型来做权限控制。")]),s._v(" "),n("h2",{attrs:{id:"什么是-cookie-cookie-的作用是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是-cookie-cookie-的作用是什么"}},[s._v("#")]),s._v(" 什么是 Cookie ? Cookie 的作用是什么?")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210615162505880.png",alt:""}})]),s._v(" "),n("p",[n("code",[s._v("Cookie")]),s._v(" 和 "),n("code",[s._v("Session")]),s._v(" 都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。")]),s._v(" "),n("p",[s._v("维基百科是这样定义 "),n("code",[s._v("Cookie")]),s._v(" 的：")]),s._v(" "),n("blockquote",[n("p",[n("code",[s._v("Cookies")]),s._v(" 是某些网站为了辨别用户身份而储存在用户本地终端上的数据（通常经过加密）。")])]),s._v(" "),n("p",[s._v("简单来说： "),n("strong",[n("code",[s._v("Cookie")]),s._v(" 存放在客户端，一般用来保存用户信息")]),s._v("。")]),s._v(" "),n("p",[s._v("下面是 "),n("code",[s._v("Cookie")]),s._v(" 的一些应用案例：")]),s._v(" "),n("ol",[n("li",[s._v("我们在 "),n("code",[s._v("Cookie")]),s._v(" 中保存已经登录过的用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了。除此之外，"),n("code",[s._v("Cookie")]),s._v(" 还能保存用户首选项，主题和其他设置信息。")]),s._v(" "),n("li",[s._v("使用 "),n("code",[s._v("Cookie")]),s._v(" 保存 "),n("code",[s._v("Session")]),s._v(" 或者 "),n("code",[s._v("Token")]),s._v(" ，向后端发送请求的时候带上 "),n("code",[s._v("Cookie")]),s._v("，这样后端就能取到 "),n("code",[s._v("Session")]),s._v(" 或者 "),n("code",[s._v("Token")]),s._v(" 了。这样就能记录用户当前的状态了，因为 HTTP 协议是无状态的。")]),s._v(" "),n("li",[n("code",[s._v("Cookie")]),s._v(" 还可以用来记录和分析用户行为。举个简单的例子你在网上购物的时候，因为 HTTP 协议是没有状态的，如果服务器想要获取你在某个页面的停留状态或者看了哪些商品，一种常用的实现方式就是将这些信息存放在 "),n("code",[s._v("Cookie")])]),s._v(" "),n("li",[s._v("......")])]),s._v(" "),n("h2",{attrs:{id:"如何在项目中使用-cookie-呢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何在项目中使用-cookie-呢"}},[s._v("#")]),s._v(" 如何在项目中使用 Cookie 呢？")]),s._v(" "),n("p",[s._v("我这里以 Spring Boot 项目为例。")]),s._v(" "),n("p",[n("strong",[s._v("1)设置 "),n("code",[s._v("Cookie")]),s._v(" 返回给客户端")])]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@GetMapping")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/change-username"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("setCookie")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletResponse")]),s._v(" response"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建一个 cookie")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cookie")]),s._v(" cookie "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cookie")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"username"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Jovan"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//设置 cookie过期时间")]),s._v("\n    cookie"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("setMaxAge")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// expires in 7 days")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//添加到 response 中")]),s._v("\n    response"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("addCookie")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cookie"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Username is changed!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[n("strong",[s._v("2) 使用 Spring 框架提供的 "),n("code",[s._v("@CookieValue")]),s._v(" 注解获取特定的 cookie 的值")])]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@GetMapping")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("readCookie")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@CookieValue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"username"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" defaultValue "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Atta"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" username"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hey! My username is "')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" username"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("3) 读取所有的 "),n("code",[s._v("Cookie")]),s._v(" 值")])]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@GetMapping")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/all-cookies"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("readAllCookies")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpServletRequest")]),s._v(" request"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cookie")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" cookies "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" request"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getCookies")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cookies "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Arrays")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("stream")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cookies"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"="')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getValue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("collect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collectors")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("joining")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('", "')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"No cookies"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("更多关于如何在 Spring Boot 中使用 "),n("code",[s._v("Cookie")]),s._v(" 的内容可以查看这篇文章："),n("a",{attrs:{href:"https://attacomsian.com/blog/cookies-spring-boot%E3%80%82",target:"_blank",rel:"noopener noreferrer"}},[s._v("How to use cookies in Spring Boot"),n("OutboundLink")],1),s._v(" 。")]),s._v(" "),n("h2",{attrs:{id:"cookie-和-session-有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cookie-和-session-有什么区别"}},[s._v("#")]),s._v(" Cookie 和 Session 有什么区别？")]),s._v(" "),n("p",[n("strong",[n("code",[s._v("Session")]),s._v(" 的主要作用就是通过服务端记录用户的状态。")]),s._v(" 典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 "),n("code",[s._v("Session")]),s._v(" 之后就可以标识这个用户并且跟踪这个用户了。")]),s._v(" "),n("p",[n("code",[s._v("Cookie")]),s._v(" 数据保存在客户端(浏览器端)，"),n("code",[s._v("Session")]),s._v(" 数据保存在服务器端。相对来说 "),n("code",[s._v("Session")]),s._v(" 安全性更高。如果使用 "),n("code",[s._v("Cookie")]),s._v(" 的一些敏感信息不要写入 "),n("code",[s._v("Cookie")]),s._v(" 中，最好能将 "),n("code",[s._v("Cookie")]),s._v(" 信息加密然后使用到的时候再去服务器端解密。")]),s._v(" "),n("p",[n("strong",[s._v("那么，如何使用 "),n("code",[s._v("Session")]),s._v(" 进行身份验证？")])]),s._v(" "),n("h2",{attrs:{id:"如何使用-session-cookie-方案进行身份验证"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何使用-session-cookie-方案进行身份验证"}},[s._v("#")]),s._v(" 如何使用 Session-Cookie 方案进行身份验证？")]),s._v(" "),n("p",[s._v("很多时候我们都是通过 "),n("code",[s._v("SessionID")]),s._v(" 来实现特定的用户，"),n("code",[s._v("SessionID")]),s._v(" 一般会选择存放在 Redis 中。举个例子：")]),s._v(" "),n("ol",[n("li",[s._v("用户成功登陆系统，然后返回给客户端具有 "),n("code",[s._v("SessionID")]),s._v(" 的 "),n("code",[s._v("Cookie")])]),s._v(" "),n("li",[s._v("当用户向后端发起请求的时候会把 "),n("code",[s._v("SessionID")]),s._v(" 带上，这样后端就知道你的身份状态了。")])]),s._v(" "),n("p",[s._v("关于这种认证方式更详细的过程如下：")]),s._v(" "),n("p",[n("img",{attrs:{src:e(712),alt:""}})]),s._v(" "),n("ol",[n("li",[s._v("用户向服务器发送用户名、密码、验证码用于登陆系统。")]),s._v(" "),n("li",[s._v("服务器验证通过后，服务器为用户创建一个 "),n("code",[s._v("Session")]),s._v("，并将 "),n("code",[s._v("Session")]),s._v(" 信息存储起来。")]),s._v(" "),n("li",[s._v("服务器向用户返回一个 "),n("code",[s._v("SessionID")]),s._v("，写入用户的 "),n("code",[s._v("Cookie")]),s._v("。")]),s._v(" "),n("li",[s._v("当用户保持登录状态时，"),n("code",[s._v("Cookie")]),s._v(" 将与每个后续请求一起被发送出去。")]),s._v(" "),n("li",[s._v("服务器可以将存储在 "),n("code",[s._v("Cookie")]),s._v(" 上的 "),n("code",[s._v("SessionID")]),s._v(" 与存储在内存中或者数据库中的 "),n("code",[s._v("Session")]),s._v(" 信息进行比较，以验证用户的身份，返回给用户客户端响应信息的时候会附带用户当前的状态。")])]),s._v(" "),n("p",[s._v("使用 "),n("code",[s._v("Session")]),s._v(" 的时候需要注意下面几个点：")]),s._v(" "),n("ol",[n("li",[s._v("依赖 "),n("code",[s._v("Session")]),s._v(" 的关键业务一定要确保客户端开启了 "),n("code",[s._v("Cookie")]),s._v("。")]),s._v(" "),n("li",[s._v("注意 "),n("code",[s._v("Session")]),s._v(" 的过期时间。")])]),s._v(" "),n("p",[s._v("另外，Spring Session 提供了一种跨多个应用程序或实例管理用户会话信息的机制。如果想详细了解可以查看下面几篇很不错的文章：")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://codeboje.de/spring-Session-tutorial/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Getting Started with Spring Session"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://www.baeldung.com/spring-Session",target:"_blank",rel:"noopener noreferrer"}},[s._v("Guide to Spring Session"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://medium.com/@gvnix/sticky-Sessions-with-spring-Session-redis-bdc6f7438cc3",target:"_blank",rel:"noopener noreferrer"}},[s._v("Sticky Sessions with Spring Session & Redis"),n("OutboundLink")],1)])]),s._v(" "),n("h2",{attrs:{id:"多服务器节点下-session-cookie-方案如何做"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多服务器节点下-session-cookie-方案如何做"}},[s._v("#")]),s._v(" 多服务器节点下 Session-Cookie 方案如何做？")]),s._v(" "),n("p",[s._v("Session-Cookie 方案在单体环境是一个非常好的身份认证方案。但是，当服务器水平拓展成多节点时，Session-Cookie 方案就要面临挑战了。")]),s._v(" "),n("p",[s._v("举个例子：假如我们部署了两份相同的服务 A，B，用户第一次登陆的时候 ，Nginx 通过负载均衡机制将用户请求转发到 A 服务器，此时用户的 Session 信息保存在 A 服务器。结果，用户第二次访问的时候 Nginx 将请求路由到 B 服务器，由于 B 服务器没有保存 用户的 Session 信息，导致用户需要重新进行登陆。")]),s._v(" "),n("p",[n("strong",[s._v("我们应该如何避免上面这种情况的出现呢？")])]),s._v(" "),n("p",[s._v("有几个方案可供大家参考：")]),s._v(" "),n("ol",[n("li",[s._v("某个用户的所有请求都通过特性的哈希策略分配给同一个服务器处理。这样的话，每个服务器都保存了一部分用户的 Session 信息。服务器宕机，其保存的所有 Session 信息就完全丢失了。")]),s._v(" "),n("li",[s._v("每一个服务器保存的 Session 信息都是互相同步的，也就是说每一个服务器都保存了全量的 Session 信息。每当一个服务器的 Session 信息发生变化，我们就将其同步到其他服务器。这种方案成本太大，并且，节点越多时，同步成本也越高。")]),s._v(" "),n("li",[s._v("单独使用一个所有服务器都能访问到的数据节点（比如缓存）来存放 Session 信息。为了保证高可用，数据节点尽量要避免是单点。")])]),s._v(" "),n("h2",{attrs:{id:"如果没有-cookie-的话-session-还能用吗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如果没有-cookie-的话-session-还能用吗"}},[s._v("#")]),s._v(" 如果没有 Cookie 的话 Session 还能用吗？")]),s._v(" "),n("p",[s._v("这是一道经典的面试题！")]),s._v(" "),n("p",[s._v("一般是通过 "),n("code",[s._v("Cookie")]),s._v(" 来保存 "),n("code",[s._v("SessionID")]),s._v(" ，假如你使用了 "),n("code",[s._v("Cookie")]),s._v(" 保存 "),n("code",[s._v("SessionID")]),s._v(" 的方案的话， 如果客户端禁用了 "),n("code",[s._v("Cookie")]),s._v("，那么 "),n("code",[s._v("Session")]),s._v(" 就无法正常工作。")]),s._v(" "),n("p",[s._v("但是，并不是没有 "),n("code",[s._v("Cookie")]),s._v(" 之后就不能用 "),n("code",[s._v("Session")]),s._v(" 了，比如你可以将 "),n("code",[s._v("SessionID")]),s._v(" 放在请求的 "),n("code",[s._v("url")]),s._v(" 里面"),n("code",[s._v("https://javaguide.cn/?Session_id=xxx")]),s._v(" 。这种方案的话可行，但是安全性和用户体验感降低。当然，为了你也可以对 "),n("code",[s._v("SessionID")]),s._v(" 进行一次加密之后再传入后端。")]),s._v(" "),n("h2",{attrs:{id:"为什么-cookie-无法防止-csrf-攻击-而-token-可以"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么-cookie-无法防止-csrf-攻击-而-token-可以"}},[s._v("#")]),s._v(" 为什么 Cookie 无法防止 CSRF 攻击，而 Token 可以？")]),s._v(" "),n("p",[s._v("**CSRF（Cross Site Request Forgery）**一般被翻译为 "),n("strong",[s._v("跨站请求伪造")]),s._v(" 。那么什么是 "),n("strong",[s._v("跨站请求伪造")]),s._v(" 呢？说简单用你的身份去发送一些对你不友好的请求。举个简单的例子：")]),s._v(" "),n("p",[s._v("小壮登录了某网上银行，他来到了网上银行的帖子区，看到一个帖子下面有一个链接写着“科学理财，年盈利率过万”，小壮好奇的点开了这个链接，结果发现自己的账户少了 10000 元。这是这么回事呢？原来黑客在链接中藏了一个请求，这个请求直接利用小壮的身份给银行发送了一个转账请求,也就是通过你的 Cookie 向银行发出请求。")]),s._v(" "),n("div",{staticClass:"language-html line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[s._v("<a src=http://www.mybank.com/Transfer?bankId=11&money=10000>科学理财，年盈利率过万</>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("上面也提到过，进行 "),n("code",[s._v("Session")]),s._v(" 认证的时候，我们一般使用 "),n("code",[s._v("Cookie")]),s._v(" 来存储 "),n("code",[s._v("SessionId")]),s._v(",当我们登陆后后端生成一个 "),n("code",[s._v("SessionId")]),s._v(" 放在 Cookie 中返回给客户端，服务端通过 Redis 或者其他存储工具记录保存着这个 "),n("code",[s._v("SessionId")]),s._v("，客户端登录以后每次请求都会带上这个 "),n("code",[s._v("SessionId")]),s._v("，服务端通过这个 "),n("code",[s._v("SessionId")]),s._v(" 来标示你这个人。如果别人通过 "),n("code",[s._v("Cookie")]),s._v(" 拿到了 "),n("code",[s._v("SessionId")]),s._v(" 后就可以代替你的身份访问系统了。")]),s._v(" "),n("p",[n("code",[s._v("Session")]),s._v(" 认证中 "),n("code",[s._v("Cookie")]),s._v(" 中的 "),n("code",[s._v("SessionId")]),s._v(" 是由浏览器发送到服务端的，借助这个特性，攻击者就可以通过让用户误点攻击链接，达到攻击效果。")]),s._v(" "),n("p",[s._v("但是，我们使用 "),n("code",[s._v("Token")]),s._v(" 的话就不会存在这个问题，在我们登录成功获得 "),n("code",[s._v("Token")]),s._v(" 之后，一般会选择存放在 "),n("code",[s._v("localStorage")]),s._v(" （浏览器本地存储）中。然后我们在前端通过某些方式会给每个发到后端的请求加上这个 "),n("code",[s._v("Token")]),s._v(",这样就不会出现 CSRF 漏洞的问题。因为，即使有个你点击了非法链接发送了请求到服务端，这个非法请求是不会携带 "),n("code",[s._v("Token")]),s._v(" 的，所以这个请求将是非法的。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210615161108272.png",alt:""}})]),s._v(" "),n("p",[s._v("需要注意的是不论是 "),n("code",[s._v("Cookie")]),s._v(" 还是 "),n("code",[s._v("Token")]),s._v(" 都无法避免 "),n("strong",[s._v("跨站脚本攻击（Cross Site Scripting）XSS")]),s._v(" 。")]),s._v(" "),n("blockquote",[n("p",[s._v("跨站脚本攻击（Cross Site Scripting）缩写为 CSS 但这会与层叠样式表（Cascading Style Sheets，CSS）的缩写混淆。因此，有人将跨站脚本攻击缩写为 XSS。")])]),s._v(" "),n("p",[s._v("XSS 中攻击者会用各种方式将恶意代码注入到其他用户的页面中。就可以通过脚本盗用信息比如 "),n("code",[s._v("Cookie")]),s._v(" 。")]),s._v(" "),n("p",[s._v("推荐阅读："),n("a",{attrs:{href:"https://tech.meituan.com/2018/10/11/fe-security-csrf.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("如何防止 CSRF 攻击？—美团技术团队"),n("OutboundLink")],1)]),s._v(" "),n("h2",{attrs:{id:"什么是-token-什么是-jwt"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是-token-什么是-jwt"}},[s._v("#")]),s._v(" 什么是 Token?什么是 JWT?")]),s._v(" "),n("p",[s._v("我们在前面的问题中探讨了使用 "),n("code",[s._v("Session")]),s._v(" 来鉴别用户的身份，并且给出了几个 Spring Session 的案例分享。 我们知道 "),n("code",[s._v("Session")]),s._v(" 信息需要保存一份在服务器端。这种方式会带来一些麻烦，比如需要我们保证保存 "),n("code",[s._v("Session")]),s._v(" 信息服务器的可用性、不适合移动端（依赖 "),n("code",[s._v("Cookie")]),s._v("）等等。")]),s._v(" "),n("p",[s._v("有没有一种不需要自己存放 "),n("code",[s._v("Session")]),s._v(" 信息就能实现身份验证的方式呢？使用 "),n("code",[s._v("Token")]),s._v(" 即可！"),n("strong",[s._v("JWT")]),s._v(" （JSON Web Token） 就是这种方式的实现，通过这种方式服务器端就不需要保存 "),n("code",[s._v("Session")]),s._v(" 数据了，只用在客户端保存服务端返回给客户的 "),n("code",[s._v("Token")]),s._v(" 就可以了，扩展性得到提升。")]),s._v(" "),n("p",[n("strong",[s._v("JWT 本质上就一段签名的 JSON 格式的数据。由于它是带有签名的，因此接收者便可以验证它的真实性。")])]),s._v(" "),n("p",[s._v("下面是 "),n("a",{attrs:{href:"https://tools.ietf.org/html/rfc7519",target:"_blank",rel:"noopener noreferrer"}},[s._v("RFC 7519"),n("OutboundLink")],1),s._v(" 对 JWT 做的较为正式的定义。")]),s._v(" "),n("blockquote",[n("p",[s._v("JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted. ——"),n("a",{attrs:{href:"https://tools.ietf.org/html/rfc7519",target:"_blank",rel:"noopener noreferrer"}},[s._v("JSON Web Token (JWT)"),n("OutboundLink")],1)])]),s._v(" "),n("p",[s._v("JWT 由 3 部分构成:")]),s._v(" "),n("ol",[n("li",[n("strong",[s._v("Header")]),s._v(" : 描述 JWT 的元数据，定义了生成签名的算法以及 "),n("code",[s._v("Token")]),s._v(" 的类型。")]),s._v(" "),n("li",[n("strong",[s._v("Payload")]),s._v(" : 用来存放实际需要传递的数据")]),s._v(" "),n("li",[n("strong",[s._v("Signature（签名）")]),s._v(" ：服务器通过"),n("code",[s._v("Payload")]),s._v("、"),n("code",[s._v("Header")]),s._v("和一个密钥("),n("code",[s._v("secret")]),s._v(")使用 "),n("code",[s._v("Header")]),s._v(" 里面指定的签名算法（默认是 HMAC SHA256）生成。")])]),s._v(" "),n("h2",{attrs:{id:"如何基于-token-进行身份验证"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何基于-token-进行身份验证"}},[s._v("#")]),s._v(" 如何基于 Token 进行身份验证？")]),s._v(" "),n("p",[s._v("在基于 Token 进行身份验证的的应用程序中，服务器通过"),n("code",[s._v("Payload")]),s._v("、"),n("code",[s._v("Header")]),s._v("和一个密钥("),n("code",[s._v("secret")]),s._v(")创建令牌（"),n("code",[s._v("Token")]),s._v("）并将 "),n("code",[s._v("Token")]),s._v(" 发送给客户端，客户端将 "),n("code",[s._v("Token")]),s._v(" 保存在 Cookie 或者 localStorage 里面，以后客户端发出的所有请求都会携带这个令牌。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP Header 的 Authorization 字段中："),n("code",[s._v("Authorization: Bearer Token")]),s._v("。")]),s._v(" "),n("p",[n("img",{attrs:{src:e(713),alt:"jwt"}})]),s._v(" "),n("ol",[n("li",[s._v("用户向服务器发送用户名和密码用于登陆系统。")]),s._v(" "),n("li",[s._v("身份验证服务响应并返回了签名的 JWT，上面包含了用户是谁的内容。")]),s._v(" "),n("li",[s._v("用户以后每次向后端发请求都在 "),n("code",[s._v("Header")]),s._v(" 中带上 JWT。")]),s._v(" "),n("li",[s._v("服务端检查 JWT 并从中获取用户相关信息。")])]),s._v(" "),n("h2",{attrs:{id:"什么是-sso"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是-sso"}},[s._v("#")]),s._v(" 什么是 SSO?")]),s._v(" "),n("p",[s._v("SSO(Single Sign On)即单点登录说的是用户登陆多个子系统的其中一个就有权访问与其相关的其他系统。举个例子我们在登陆了京东金融之后，我们同时也成功登陆京东的京东超市、京东国际、京东生鲜等子系统。")]),s._v(" "),n("p",[n("img",{attrs:{src:e(714),alt:"sso"}})]),s._v(" "),n("h2",{attrs:{id:"什么是-oauth-2-0"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是-oauth-2-0"}},[s._v("#")]),s._v(" 什么是 OAuth 2.0？")]),s._v(" "),n("p",[s._v("OAuth 是一个行业的标准授权协议，主要用来授权第三方应用获取有限的权限。而 OAuth 2.0 是对 OAuth 1.0 的完全重新设计，OAuth 2.0 更快，更容易实现，OAuth 1.0 已经被废弃。详情请见："),n("a",{attrs:{href:"https://tools.ietf.org/html/rfc6749",target:"_blank",rel:"noopener noreferrer"}},[s._v("rfc6749"),n("OutboundLink")],1),s._v("。")]),s._v(" "),n("p",[s._v("实际上它就是一种授权机制，它的最终目的是为第三方应用颁发一个有时效性的令牌 Token，使得第三方应用能够通过该令牌获取相关的资源。")]),s._v(" "),n("p",[s._v("OAuth 2.0 比较常用的场景就是第三方登录，当你的网站接入了第三方登录的时候一般就是使用的 OAuth 2.0 协议。")]),s._v(" "),n("p",[s._v("另外，现在 OAuth 2.0 也常见于支付场景（微信支付、支付宝支付）和开发平台（微信开放平台、阿里开放平台等等）。")]),s._v(" "),n("p",[s._v("微信支付账户相关参数：")]),s._v(" "),n("p",[n("img",{attrs:{src:e(715),alt:""}})]),s._v(" "),n("p",[s._v("下图是 "),n("a",{attrs:{href:"https://api.slack.com/legacy/oauth",target:"_blank",rel:"noopener noreferrer"}},[s._v("Slack OAuth 2.0 第三方登录"),n("OutboundLink")],1),s._v("的示意图：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210615151716340.png",alt:""}})]),s._v(" "),n("p",[n("strong",[s._v("推荐阅读：")])]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2019/04/oauth_design.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("OAuth 2.0 的一个简单解释"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://deepzz.com/post/what-is-oauth2-protocol.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("10 分钟理解什么是 OAuth 2.0 协议"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("OAuth 2.0 的四种方式"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2019/04/github-oauth.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("GitHub OAuth 第三方登录示例教程"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=a.exports}}]);