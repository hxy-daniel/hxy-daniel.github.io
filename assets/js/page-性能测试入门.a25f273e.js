(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{777:function(_,v,a){"use strict";a.r(v);var t=a(1),s=Object(t.a)({},(function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"性能测试入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能测试入门"}},[_._v("#")]),_._v(" 性能测试入门")]),_._v(" "),a("p",[_._v("性能测试一般情况下都是由测试这个职位去做的，那还需要我们开发学这个干嘛呢？了解性能测试的指标、分类以及工具等知识有助于我们更好地去写出性能更好的程序，另外作为开发这个角色，如果你会性能测试的话，相信也会为你的履历加分不少。")]),_._v(" "),a("p",[_._v("这篇文章是我会结合自己的实际经历以及在测试这里取的经所得，除此之外，我还借鉴了一些优秀书籍，希望对你有帮助。")]),_._v(" "),a("p",[_._v("本文思维导图：")]),_._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-11/网站性能测试.png"}}),_._v(" "),a("h2",{attrs:{id:"一-不同角色看网站性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-不同角色看网站性能"}},[_._v("#")]),_._v(" 一 不同角色看网站性能")]),_._v(" "),a("h3",{attrs:{id:"_1-1-用户"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-用户"}},[_._v("#")]),_._v(" 1.1 用户")]),_._v(" "),a("p",[_._v("当用户打开一个网站的时候，最关注的是什么？当然是网站响应速度的快慢。比如我们点击了淘宝的主页，淘宝需要多久将首页的内容呈现在我的面前，我点击了提交订单按钮需要多久返回结果等等。")]),_._v(" "),a("p",[_._v("所以，用户在体验我们系统的时候往往根据你的响应速度的快慢来评判你的网站的性能。")]),_._v(" "),a("h3",{attrs:{id:"_1-2-开发人员"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-开发人员"}},[_._v("#")]),_._v(" 1.2 开发人员")]),_._v(" "),a("p",[_._v("用户与开发人员都关注速度，这个速度实际上就是我们的系统"),a("strong",[_._v("处理用户请求的速度")]),_._v("。")]),_._v(" "),a("p",[_._v("开发人员一般情况下很难直观的去评判自己网站的性能，我们往往会根据网站当前的架构以及基础设施情况给一个大概的值,比如：")]),_._v(" "),a("ol",[a("li",[_._v("项目架构是分布式的吗？")]),_._v(" "),a("li",[_._v("用到了缓存和消息队列没有？")]),_._v(" "),a("li",[_._v("高并发的业务有没有特殊处理？")]),_._v(" "),a("li",[_._v("数据库设计是否合理？")]),_._v(" "),a("li",[_._v("系统用到的算法是否还需要优化？")]),_._v(" "),a("li",[_._v("系统是否存在内存泄露的问题？")]),_._v(" "),a("li",[_._v("项目使用的 Redis 缓存多大？服务器性能如何？用的是机械硬盘还是固态硬盘？")]),_._v(" "),a("li",[_._v("......")])]),_._v(" "),a("h3",{attrs:{id:"_1-3-测试人员"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-测试人员"}},[_._v("#")]),_._v(" 1.3 测试人员")]),_._v(" "),a("p",[_._v("测试人员一般会根据性能测试工具来测试，然后一般会做出一个表格。这个表格可能会涵盖下面这些重要的内容：")]),_._v(" "),a("ol",[a("li",[_._v("相应时间；")]),_._v(" "),a("li",[_._v("请求成功率；")]),_._v(" "),a("li",[_._v("吞吐量；")]),_._v(" "),a("li",[_._v("......")])]),_._v(" "),a("h3",{attrs:{id:"_1-4-运维人员"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-运维人员"}},[_._v("#")]),_._v(" 1.4 运维人员")]),_._v(" "),a("p",[_._v("运维人员会倾向于根据基础设施和资源的利用率来判断网站的性能，比如我们的服务器资源使用是否合理、数据库资源是否存在滥用的情况、当然，这是传统的运维人员，现在 Devpos 火起来后，单纯干运维的很少了。我们这里暂且还保留有这个角色。")]),_._v(" "),a("h2",{attrs:{id:"二-性能测试需要注意的点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-性能测试需要注意的点"}},[_._v("#")]),_._v(" 二 性能测试需要注意的点")]),_._v(" "),a("p",[_._v("几乎没有文章在讲性能测试的时候提到这个问题，大家都会讲如何去性能测试，有哪些性能测试指标这些东西。")]),_._v(" "),a("h3",{attrs:{id:"_2-1-了解系统的业务场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-了解系统的业务场景"}},[_._v("#")]),_._v(" 2.1 了解系统的业务场景")]),_._v(" "),a("p",[a("strong",[_._v("性能测试之前更需要你了解当前的系统的业务场景。")]),_._v(" 对系统业务了解的不够深刻，我们很容易犯测试方向偏执的错误，从而导致我们忽略了对系统某些更需要性能测试的地方进行测试。比如我们的系统可以为用户提供发送邮件的功能，用户配置成功邮箱后只需输入相应的邮箱之后就能发送，系统每天大概能处理上万次发邮件的请求。很多人看到这个可能就直接开始使用相关工具测试邮箱发送接口，但是，发送邮件这个场景可能不是当前系统的性能瓶颈，这么多人用我们的系统发邮件， 还可能有很多人一起发邮件，单单这个场景就这么人用，那用户管理可能才是性能瓶颈吧！")]),_._v(" "),a("h3",{attrs:{id:"_2-2-历史数据非常有用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-历史数据非常有用"}},[_._v("#")]),_._v(" 2.2 历史数据非常有用")]),_._v(" "),a("p",[_._v("当前系统所留下的历史数据非常重要，一般情况下，我们可以通过相应的些历史数据初步判定这个系统哪些接口调用的比较多、哪些 service 承受的压力最大，这样的话，我们就可以针对这些地方进行更细致的性能测试与分析。")]),_._v(" "),a("p",[_._v("另外，这些地方也就像这个系统的一个短板一样，优化好了这些地方会为我们的系统带来质的提升。")]),_._v(" "),a("h3",{attrs:{id:"三-性能测试的指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-性能测试的指标"}},[_._v("#")]),_._v(" 三 性能测试的指标")]),_._v(" "),a("h3",{attrs:{id:"_3-1-响应时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-响应时间"}},[_._v("#")]),_._v(" 3.1 响应时间")]),_._v(" "),a("p",[a("strong",[_._v("响应时间就是用户发出请求到用户收到系统处理结果所需要的时间。")]),_._v(" 重要吗？实在太重要！")]),_._v(" "),a("p",[_._v("比较出名的 2-5-8 原则是这样描述的：通常来说，2到5秒，页面体验会比较好，5到8秒还可以接受，8秒以上基本就很难接受了。另外，据统计当网站慢一秒就会流失十分之一的客户。")]),_._v(" "),a("p",[_._v("但是，在某些场景下我们也并不需要太看重 2-5-8 原则 ，比如我觉得系统导出导入大数据量这种就不需要，系统生成系统报告这种也不需要。")]),_._v(" "),a("h3",{attrs:{id:"_3-2-并发数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-并发数"}},[_._v("#")]),_._v(" 3.2 并发数")]),_._v(" "),a("p",[a("strong",[_._v("并发数是系统能同时处理请求的数目即同时提交请求的用户数目。")])]),_._v(" "),a("p",[_._v("不得不说，高并发是现在后端架构中非常非常火热的一个词了，这个与当前的互联网环境以及中国整体的互联网用户量都有很大关系。一般情况下，你的系统并发量越大，说明你的产品做的就越大。但是，并不是每个系统都需要达到像淘宝、12306 这种亿级并发量的。")]),_._v(" "),a("h3",{attrs:{id:"_3-3-吞吐量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-吞吐量"}},[_._v("#")]),_._v(" 3.3 吞吐量")]),_._v(" "),a("p",[_._v("吞吐量指的是系统单位时间内系统处理的请求数量。衡量吞吐量有几个重要的参数：QPS（TPS）、并发数、响应时间。")]),_._v(" "),a("ol",[a("li",[_._v("QPS（Query Per Second）：服务器每秒可以执行的查询次数；")]),_._v(" "),a("li",[_._v("TPS（Transaction Per Second）：服务器每秒处理的事务数（这里的一个事务可以理解为客户发出请求到收到服务器的过程）；")]),_._v(" "),a("li",[_._v("并发数；系统能同时处理请求的数目即同时提交请求的用户数目。")]),_._v(" "),a("li",[_._v("响应时间： 一般取多次请求的平均响应时间")])]),_._v(" "),a("p",[_._v("理清他们的概念，就很容易搞清楚他们之间的关系了。")]),_._v(" "),a("ul",[a("li",[a("strong",[_._v("QPS（TPS）")]),_._v(" = 并发数/平均响应时间")]),_._v(" "),a("li",[a("strong",[_._v("并发数")]),_._v(" = QPS\\平均响应时间")])]),_._v(" "),a("p",[_._v("书中是这样描述 QPS 和 TPS 的区别的。")]),_._v(" "),a("blockquote",[a("p",[_._v("QPS vs TPS：QPS 基本类似于 TPS，但是不同的是，对于一个页面的一次访问，形成一个TPS；但一次页面请求，可能产生多次对服务器的请求，服务器对这些请求，就可计入“QPS”之中。如，访问一个页面会请求服务器2次，一次访问，产生一个“T”，产生2个“Q”。")])]),_._v(" "),a("h3",{attrs:{id:"_3-4-性能计数器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-性能计数器"}},[_._v("#")]),_._v(" 3.4 性能计数器")]),_._v(" "),a("p",[a("strong",[_._v("性能计数器是描述服务器或者操作系统的一些数据指标如内存使用、CPU使用、磁盘与网络I/O等情况。")])]),_._v(" "),a("h3",{attrs:{id:"四-几种常见的性能测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-几种常见的性能测试"}},[_._v("#")]),_._v(" 四 几种常见的性能测试")]),_._v(" "),a("h3",{attrs:{id:"性能测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能测试"}},[_._v("#")]),_._v(" 性能测试")]),_._v(" "),a("p",[_._v("性能测试方法是通过测试工具模拟用户请求系统，目的主要是为了测试系统的性能是否满足要求。通俗地说，这种方法就是要在特定的运行条件下验证系统的能力状态。")]),_._v(" "),a("p",[_._v("性能测试是你在对系统性能已经有了解的前提之后进行的，并且有明确的性能指标。")]),_._v(" "),a("h3",{attrs:{id:"负载测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载测试"}},[_._v("#")]),_._v(" 负载测试")]),_._v(" "),a("p",[_._v("对被测试的系统继续加大请求压力，直到服务器的某个资源已经达到饱和了，比如系统的缓存已经不够用了或者系统的响应时间已经不满足要求了。")]),_._v(" "),a("p",[_._v("负载测试说白点就是测试系统的上线。")]),_._v(" "),a("h3",{attrs:{id:"压力测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#压力测试"}},[_._v("#")]),_._v(" 压力测试")]),_._v(" "),a("p",[_._v("不去管系统资源的使用情况，对系统继续加大请求压力，直到服务器崩溃无法再继续提供服务。")]),_._v(" "),a("h3",{attrs:{id:"稳定性测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#稳定性测试"}},[_._v("#")]),_._v(" 稳定性测试")]),_._v(" "),a("p",[_._v("模拟真实场景，给系统一定压力，看看业务是否能稳定运行。")]),_._v(" "),a("h2",{attrs:{id:"五-常用性能测试工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-常用性能测试工具"}},[_._v("#")]),_._v(" 五 常用性能测试工具")]),_._v(" "),a("p",[_._v("这里就不多扩展了，有时间的话会单独拎一个熟悉的说一下。")]),_._v(" "),a("h3",{attrs:{id:"_5-1-后端常用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-后端常用"}},[_._v("#")]),_._v(" 5.1 后端常用")]),_._v(" "),a("p",[_._v("没记错的话，除了 LoadRunner 其他几款性能测试工具都是开源免费的。")]),_._v(" "),a("ol",[a("li",[_._v("Jmeter ：Apache JMeter 是 JAVA 开发的性能测试工具。")]),_._v(" "),a("li",[_._v("LoadRunner：一款商业的性能测试工具。")]),_._v(" "),a("li",[_._v("Galtling ：一款基于Scala 开发的高性能服务器性能测试工具。")]),_._v(" "),a("li",[_._v("ab ：全称为 Apache Bench 。Apache 旗下的一款测试工具，非常实用。")])]),_._v(" "),a("h3",{attrs:{id:"_5-2-前端常用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-前端常用"}},[_._v("#")]),_._v(" 5.2 前端常用")]),_._v(" "),a("ol",[a("li",[_._v("Fiddler：抓包工具，它可以修改请求的数据，甚至可以修改服务器返回的数据，功能非常强大，是Web 调试的利器。")]),_._v(" "),a("li",[_._v("HttpWatch: 可用于录制HTTP请求信息的工具。")])]),_._v(" "),a("h2",{attrs:{id:"六-常见的性能优化策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六-常见的性能优化策略"}},[_._v("#")]),_._v(" 六 常见的性能优化策略")]),_._v(" "),a("p",[_._v("性能优化之前我们需要对请求经历的各个环节进行分析，排查出可能出现性能瓶颈的地方，定位问题。")]),_._v(" "),a("p",[_._v("下面是一些性能优化时，我经常拿来自问的一些问题：")]),_._v(" "),a("ol",[a("li",[_._v("系统是否需要缓存？")]),_._v(" "),a("li",[_._v("系统架构本身是不是就有问题？")]),_._v(" "),a("li",[_._v("系统是否存在死锁的地方？")]),_._v(" "),a("li",[_._v("系统是否存在内存泄漏？（Java 的自动回收内存虽然很方便，但是，有时候代码写的不好真的会造成内存泄漏）")]),_._v(" "),a("li",[_._v("数据库索引使用是否合理？")]),_._v(" "),a("li",[_._v("......")])])])}),[],!1,null,null,null);v.default=s.exports}}]);